{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"buyer",
				"buyer_conflict"
			],
			[
				"order",
				"order_date"
			],
			[
				"est",
				"estimation_time_end"
			],
			[
				"estim",
				"estimation_time_start"
			],
			[
				"over",
				"overflow-x"
			],
			[
				"form",
				"form-control"
			],
			[
				"order_",
				"order_time"
			],
			[
				"find",
				"$findTransactions〔variable〕"
			],
			[
				"estimation",
				"estimation_time_start"
			],
			[
				"error",
				"$errors〔variable〕"
			],
			[
				"sho",
				"showAll〔function〕"
			],
			[
				"gl",
				"glyphicon-pencil"
			],
			[
				"btn",
				"btn-primary"
			],
			[
				"serv",
				"$service〔variable〕"
			],
			[
				"expire",
				"expired_at"
			],
			[
				"main",
				"main_service_id"
			],
			[
				"Tra",
				"Transaction"
			],
			[
				"servic",
				"service.category"
			],
			[
				"mainser",
				"$mainservice〔variable〕"
			],
			[
				"origi",
				"$origins〔variable〕"
			],
			[
				"destin",
				"$destinations〔variable〕"
			],
			[
				"gps",
				"gps_longitude"
			],
			[
				"ori",
				"$origin〔variable〕"
			],
			[
				"str",
				"$string_origins〔variable〕"
			],
			[
				"destination",
				"destination_lat"
			],
			[
				"cate",
				"$categories〔variable〕"
			],
			[
				"show",
				"showAllNew〔function〕"
			],
			[
				"catge",
				"category_id"
			],
			[
				"dtaa",
				"$data_service〔variable〕"
			],
			[
				"erre",
				"$errors〔variable〕"
			],
			[
				"err",
				"errorResponse〔function〕"
			],
			[
				"erro",
				"errors"
			],
			[
				"ser",
				"service.category"
			],
			[
				"categ",
				"category"
			],
			[
				"data",
				"$data_favorite〔variable〕"
			],
			[
				"catego",
				"categories"
			],
			[
				"s",
				"search〔function〕"
			],
			[
				"today",
				"today〔function〕"
			],
			[
				"status",
				"status_shop"
			],
			[
				"sta",
				"status_shop"
			],
			[
				"rand",
				"randomElement"
			],
			[
				"estimate",
				"$estimate_start〔variable〕"
			],
			[
				"TRANSACTION_MA",
				"TRANSACTION_MAX_KM"
			],
			[
				"servie",
				"service.category"
			],
			[
				"TRA",
				"TRANSACTION_STATUS_3〔constant〕"
			],
			[
				"erroe",
				"$errors〔variable〕"
			],
			[
				"RAT",
				"RATING_MANTAP〔constant〕"
			],
			[
				"trasa",
				"$transaction〔variable〕"
			],
			[
				"view",
				"view-admins"
			],
			[
				"User",
				"User\\UserWebController@create"
			],
			[
				"la",
				"layouts.web.user.create"
			],
			[
				"tra",
				"$transactions〔variable〕"
			],
			[
				"pl",
				"pluck"
			],
			[
				"sisa",
				"$sisaHari〔variable〕"
			],
			[
				"mains",
				"$mainservice〔variable〕"
			],
			[
				"sh",
				"showOne〔function〕"
			],
			[
				"er",
				"errorResponse〔function〕"
			],
			[
				"mainservice",
				"mainservices"
			],
			[
				"transac",
				"$transaction〔variable〕"
			],
			[
				"es",
				"$estimate_start〔variable〕"
			],
			[
				"trans",
				"$transaction〔variable〕"
			],
			[
				"estima",
				"$estimate_start〔variable〕"
			],
			[
				"H",
				"H:i:s"
			],
			[
				"creta",
				"createFromDate〔function〕"
			],
			[
				"minus",
				"$minusTime〔variable〕"
			],
			[
				"send",
				"sendVerificationPhone〔function〕"
			],
			[
				"veri",
				"verification_link"
			],
			[
				"co",
				"count_success"
			],
			[
				"count",
				"count_success"
			],
			[
				"grap",
				"$graphBuyer〔variable〕"
			],
			[
				"push",
				"pushService"
			],
			[
				"GRA",
				"GRAPH_SERVICE"
			],
			[
				"Gra",
				"GraphController〔namespace〕"
			],
			[
				"GRAP",
				"GRAPH_USER"
			],
			[
				"fcm_",
				"fcm_registration_token"
			],
			[
				"ty",
				"$type〔variable〕"
			],
			[
				"Gr",
				"GRAPH_USER"
			],
			[
				"GR",
				"GRAPH_SERVICE"
			],
			[
				"graphS",
				"$graphService〔variable〕"
			],
			[
				"gra",
				"$graphicBuyer〔variable〕"
			],
			[
				"dis",
				"distance"
			],
			[
				"dista",
				"$distanceNew〔variable〕"
			],
			[
				"gps_",
				"gps_latitude"
			],
			[
				"longitude_",
				"longitude_destination"
			],
			[
				"latitude_",
				"latitude_destination"
			],
			[
				"distace",
				"$distanceNew〔variable〕"
			],
			[
				"G",
				"GRAPH_USER〔constant〕"
			],
			[
				"loca",
				"location_abang"
			],
			[
				"category",
				"category_type"
			],
			[
				"TR",
				"TRANSACTION_STATUS_1〔constant〕"
			],
			[
				"NO",
				"NOT_ACCEPTED_TRANS〔constant〕"
			],
			[
				"upd",
				"$updateDistance〔variable〕"
			],
			[
				"A",
				"ACCEPTED_TRANS"
			],
			[
				"id",
				"$id_transaction〔variable〕"
			],
			[
				"distan",
				"distanceMatrix"
			],
			[
				"requst",
				"$request〔variable〕"
			],
			[
				"req",
				"required|in"
			],
			[
				"longit",
				"longitude_destination"
			],
			[
				"created",
				"created_at"
			],
			[
				"int",
				"intval〔function〕"
			],
			[
				"TRANSACTION_MO",
				"TRANSACTION_MOTOR_MAX"
			],
			[
				"transa",
				"$transaction〔variable〕"
			],
			[
				"transaction",
				"$transactions〔variable〕"
			],
			[
				"staus",
				"status_order"
			],
			[
				"tole",
				"$tolerance_time_before〔variable〕"
			],
			[
				"tol",
				"$tolerance_time_after〔variable〕"
			],
			[
				"TRANSAC",
				"TRANSACTION_MOTOR_MAX"
			],
			[
				"sub",
				"subcategory_type"
			],
			[
				"chec",
				"$checkIfExists〔variable〕"
			],
			[
				"createFrom",
				"createFromFormat〔function〕"
			],
			[
				"TRANSACTION_S",
				"TRANSACTION_STATUS_2〔constant〕"
			],
			[
				"strto",
				"strtolower〔function〕"
			],
			[
				"au",
				"autofocus\tAttr"
			],
			[
				"cret",
				"createFromFormat〔function〕"
			],
			[
				"var",
				"var_dump〔function〕"
			],
			[
				"dist",
				"$distance〔variable〕"
			],
			[
				"long",
				"longitude_current"
			],
			[
				"reques",
				"$request〔variable〕"
			],
			[
				"di",
				"distanceMatrix〔function〕"
			],
			[
				"des",
				"$destination_lang〔variable〕"
			],
			[
				"sa",
				"satisfaction_level"
			],
			[
				"cont",
				"control-label"
			],
			[
				"col-sm-",
				"col-sm-3"
			],
			[
				"con",
				"control-label"
			],
			[
				"col",
				"col-sm-3"
			],
			[
				"service",
				"servicedetails"
			],
			[
				"stta",
				"status_order"
			],
			[
				"null",
				"nullable"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<?php\n\nuse Illuminate\\Http\\Request;\n\nRoute::post('oauth/token', '\\Laravel\\Passport\\Http\\Controllers\\AccessTokenController@issueToken');\nRoute::post('users/password/forgot/{id}', 'User\\UserController@sendResetLinkEmail');\nRoute::resource('users', 'User\\UserController', ['only' => ['store']]);\nRoute::get('users/{id}/verify/{token}', 'User\\UserController@verify')->name('verify');\nRoute::get('users/{id}/resend', 'User\\UserController@resend')->name('resend');\n\n\n//----------------------------- TERMS -------------------------------------------------\nRoute::get('termsApp', 'Other\\OtherController@termsApp'); // belum ada \n\n//---------------------------------- INVITE FRIENDS -----------------------------------\n// Route::post('contactCheck/{id}', 'User\\UserController@contactCheck');\n\n//------------------------------ CITY ------------------------------------------------\nRoute::get('city', 'City\\CityController@index');\nRoute::post('city/search', 'City\\CityController@searchByName');\n//------------------------------ PROVINCE ----------------------------------------\nRoute::get('province', 'Province\\ProvinceController@index');\nRoute::post('province/search', 'Province\\ProvinceController@searchByName');\n\nRoute::group(['middleware' => ['auth:api']],function () {\n\t//------------------------------- BANK & PAYMENT ----------------------------------------\n\tRoute::get('banks', 'Bank\\BankController@index');\n\tRoute::post('payments', 'Payment\\PaymentController@store');\n\n\n\tRoute::get('appSetting', 'Other\\OtherController@setting');\n\n\tRoute::resource('ads', 'Advertisement\\AdvertisementController', ['only' => ['index', 'update']]);\n\n\tRoute::resource('categories', 'Category\\CategoryController', ['only' => ['index']]);\n\t\n\tRoute::get('armadas', 'Armada\\ArmadaController@index');\n\n\t//--------------------------------------- USER API ----------------------------------------------------------\n\tRoute::group(['middleware' => ['user_expired']], function() {\n\t\tRoute::prefix('buyers')->group(function() {\n\n\t\t\tRoute::get('remainingDays', 'User\\UserController@remainingDays');\n\n\t\t\t//---------------------------- FCM --------------------------------------------------\n\t\t\tRoute::post('fcm', 'FCM\\FCMController@store');\n\t\t\tRoute::patch('fcm/{user_id}', 'FCM\\FCMController@update');\n\n\t\t\tRoute::get('buyers', 'User\\UserController@show');\n\t\t\tRoute::patch('buyers', 'User\\UserController@update');\n\t\t\tRoute::patch('changePassword', 'User\\UserController@changePassword');\n\n\t\t\tRoute::get('messages', 'Message\\MessageController@getMessageById');\n\t\t\tRoute::resource('messages', 'Message\\MessageController', ['only' => ['store', 'destroy']]);\n\t\t\tRoute::get('messages-details/{id}', 'MessageDetail\\MessageDetailController@getMessageDetailById');\n\t\t\tRoute::post('messages-details', 'MessageDetail\\MessageDetailController@store');\n\n\t\t\tRoute::resource('favorites', 'Favorite\\FavoriteController', ['only' => ['store', 'destroy']]);\n\t\t\tRoute::get('favorites', 'Favorite\\FavoriteController@getFavoriteById');\n\n\t\t\tRoute::post('transactions', 'Transaction\\TransactionController@store');\n\t\t\tRoute::patch('transactions/gps/{id_transaction}', 'Transaction\\TransactionController@updateBuyer');\n\t\t\tRoute::delete('transactions/delete', 'Transaction\\TransactionController@destroyBuyer');\n\t\t\tRoute::get('transactions/today', 'Transaction\\TransactionController@todayBuyer');\n\t\t\tRoute::get('transactions/history', 'Transaction\\TransactionController@historyBuyer');\n\t\t\tRoute::post('servicesAvailable', 'MainService\\MainServiceController@available'); //untuk transaksi diitung radiusnya\n\t\t\tRoute::post('findService', 'MainService\\MainServiceController@searchService'); //fitur search\n\t\t});\n\t\t\n\t});\n\n\t//----------------------------------- PROVIDER API -------------------------------------------------------\n\tRoute::group(['middleware' => ['provider_expired']], function() {\n\t\tRoute::prefix('mainservices')->group(function() {\n\n\t\t\tRoute::get('remainingDays', 'Service\\ServiceController@remainingDays');\n\n\t\t\tRoute::post('services', 'Service\\ServiceController@store');\n\t\t\tRoute::patch('services', 'Service\\ServiceController@update'); \n\t\t\tRoute::patch('services/closed', 'Service\\ServiceController@close');\n\n\t\t\tRoute::post('fcm', 'FCM\\FCMController@store');\n\t\t\tRoute::patch('fcm/{user_id}', 'FCM\\FCMController@update');\n\n\t\t\tRoute::get('/', 'MainService\\MainServiceController@show');\n\t\t\tRoute::patch('/', 'User\\UserController@update');\n\t\t\tRoute::patch('changePassword', 'User\\UserController@changePassword');\n\n\t\t\tRoute::get('messages', 'Message\\MessageController@getMessageById');\n\t\t\tRoute::resource('messages', 'Message\\MessageController', ['only' => ['store', 'destroy']]);\n\t\t\tRoute::get('messages-details/{id}', 'MessageDetail\\MessageDetailController@getMessageDetailById');\n\t\t\tRoute::resource('messages-details', 'MessageDetail\\MessageDetailController', ['only' => ['store']]);\n\t\t\n\t\t\tRoute::patch('transactions/{id}', 'Transaction\\TransactionController@updateService');\n\t\t\tRoute::patch('transactions/gps/{id_transaction}', 'Transaction\\TransactionController@updateService');\n\t\t\tRoute::delete('transactions/delete', 'Transaction\\TransactionController@destroyService');\n\t\t\tRoute::get('transactions/today', 'Transaction\\TransactionController@todayService');\n\t\t\tRoute::get('transactions/history', 'Transaction\\TransactionController@historyService');\n\t\t\t\n\n\t\t// Route::patch('mainservices/transactions/priority', 'Transaction\\TransactionController@updatePriority'); //Route ini ga akan dipake dulu krn klopun dikasi priority, jamnya beda2\n\n\t\t});\n\t});\n\n});\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/routes/api.php",
			"file_size": 5503,
			"file_write_time": 131514892248873537,
			"settings":
			{
				"buffer_size": 5503,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nuse App\\CustomCollection;\nuse App\\Events\\NotificationEvent;\nuse Illuminate\\Database\\Query\\paginate;\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\n// Authentication Routes...\n// $this->get('login', 'Auth\\LoginController@showLoginForm')->name('login');\n// $this->post('login', 'Auth\\LoginController@login');\n// $this->post('logout', 'Auth\\LoginController@logout')->name('logout');\n\n// Password Reset Routes...\n// $this->get('password/reset', 'Auth\\ForgotPasswordController@showLinkRequestForm')->name('password.request');\n// $this->post('password/email', 'Auth\\ForgotPasswordController@sendResetLinkEmail')->name('password.email');\n// $this->get('password/reset/{token}', 'Auth\\ResetPasswordController@showResetForm')->name('password.reset');\n// $this->post('password/reset', 'Auth\\ResetPasswordController@reset');\n\n// Route::get('error-401', 'Other\\OtherWebController@error401')->name('error-401');\nRoute::get('changePassword/{reset}', 'User\\UserController@showReset')->name('verify-web');\nRoute::patch('confirmNewPassword/{reset}', 'User\\UserController@reset')->name('change-pass');\nRoute::get('terms', 'Term\\TermWebController@terms')->name('terms');\nRoute::prefix('adminpanel')->group(function () {\n\tRoute::get('/', 'Other\\OtherWebController@slash');\n\tRoute::get('login', 'Auth\\LoginController@redirectLogin')->name('login');\n\tRoute::post('login', 'Auth\\LoginController@login');\n\n\tRoute::group(['middleware' => ['auth']],function () {\n\t\t\n\t\tRoute::get('users', 'User\\UserWebController@index')->name('view-users');\n\t\tRoute::get('users/add', 'User\\UserWebController@create')->name('view-create-users');\n\t\tRoute::post('users/add', 'User\\UserWebController@store')->name('create-users');\n\t\tRoute::get('users/update/{id}', 'User\\UserWebController@edit')->name('view-update-users');\n\t\tRoute::patch('users/update/{id}', 'User\\UserWebController@update')->name('update-users');\n\n\t\tRoute::get('admins', 'User\\UserWebController@indexAdmin')->name('view-admins');\n\t\tRoute::get('admins/add', 'User\\UserWebController@createAdmin')->name('view-create-admins');\n\t\tRoute::post('admins/add', 'User\\UserWebController@storeAdmin')->name('create-admins');\n\t\tRoute::get('admins/update/{id}', 'User\\UserWebController@editAdmin')->name('view-update-admins');\n\t\tRoute::patch('admins/update/{id}', 'User\\UserWebController@updateAdmin')->name('update-admins');\n\t\tRoute::delete('admins/delete/{id}', 'User\\UserWebController@destroyAdmin')->name('delete-admins');\n\n\t\tRoute::get('serviceDetails', 'Service\\ServiceWebController@index')->name('view-servicedetails');\n\t\tRoute::get('serviceDetails/add', 'Service\\ServiceWebController@create')->name('view-create-servicedetails');\n\t\tRoute::get('serviceDetails/{id}', 'Service\\ServiceWebController@getImages')->name('get-images');\n\t\tRoute::post('serviceDetails/add', 'Service\\ServiceWebController@store')->name('create-servicedetails');\n\t\tRoute::get('serviceDetails/update/{id}', 'Service\\ServiceWebController@edit')->name('view-update-servicedetails');\n\t\tRoute::patch('serviceDetails/update/{id}', 'Service\\ServiceWebController@update')->name('update-servicedetails');\n\t\tRoute::patch('serviceDetails/suspend/{id}', 'Service\\ServiceWebController@suspend')->name('suspend-service');\n\t\tRoute::delete('serviceDetails/delete/{id}', 'Service\\ServiceWebController@destroy')->name('delete-servicedetails');\n\n\t\tRoute::get('tags', 'Tag\\TagController@index')->name('view-tags');\n\t\tRoute::get('tags/add', 'Tag\\TagController@create')->name('view-create-tags');\n\t\tRoute::post('tags/add', 'Tag\\TagController@store')->name('create-tags');\n\t\tRoute::get('tags/update/{id}', 'Tag\\TagController@edit')->name('view-update-tags');\n\t\tRoute::patch('tags/update/{id}', 'Tag\\TagController@update')->name('update-tags');\n\t\tRoute::delete('tags/delete/{id}', 'Tag\\TagController@destroy')->name('delete-tags');\n\n\t\tRoute::get('categories', 'Category\\CategoryWebController@index')->name('view-categories');\n\t\tRoute::get('categories/add', 'Category\\CategoryWebController@create')->name('view-create-categories');\n\t\tRoute::post('categories/add', 'Category\\CategoryWebController@store')->name('create-categories');\n\t\tRoute::get('categories/update/{id}', 'Category\\CategoryWebController@edit')->name('view-update-categories');\n\t\tRoute::patch('categories/update/{id}', 'Category\\CategoryWebController@update')->name('update-categories');\n\t\tRoute::delete('categories/delete/{id}', 'Category\\CategoryWebController@destroy')->name('delete-categories');\n\n\t\tRoute::get('inbox', 'Message\\MessageWebController@index')->name('view-inbox');\n\t\tRoute::get('inbox/add', 'Message\\MessageWebController@create')->name('view-create-inbox');\n\t\tRoute::post('inbox/add', 'Message\\MessageWebController@store')->name('create-inbox');\n\t\t// Route::patch('inbox/update/{id}', 'Message\\MessageWebController@update')->name('update-inbox');\n\t\tRoute::delete('inbox/delete/{id}', 'Message\\MessageWebController@destroy')->name('delete-inbox');\n\n\t\tRoute::get('inboxDetail/{id_message}/{user_id}/{full_name}', 'MessageDetail\\MessageDetailWebController@getDetail')->name('view-inbox-details');\n\t\tRoute::post('inboxDetail/add', 'MessageDetail\\MessageDetailWebController@store')->name('create-inbox-detail');\n\n\t\tRoute::get('armadas', 'Armada\\ArmadaWebController@index')->name('view-armadas');\n\t\tRoute::get('armadas/add', 'Armada\\ArmadaWebController@create')->name('view-create-armadas');\n\t\tRoute::post('armadas/add', 'Armada\\ArmadaWebController@store')->name('create-armadas');\n\t\tRoute::get('armadas/update/{id}', 'Armada\\ArmadaWebController@edit')->name('view-update-armadas');\n\t\tRoute::patch('armadas/update/{id}', 'Armada\\ArmadaWebController@update')->name('update-armadas');\n\t\tRoute::delete('armadas/delete/{id}', 'Armada\\ArmadaWebController@destroy')->name('delete-armadas');\n\t\t\n\t\tRoute::get('provinces', 'Province\\ProvinceWebController@index')->name('view-provinces');\n\t\tRoute::get('provinces/add', 'Province\\ProvinceWebController@create')->name('view-create-provinces');\n\t\tRoute::post('provinces/add', 'Province\\ProvinceWebController@store')->name('create-provinces');\n\t\tRoute::get('provinces/update/{id}', 'Province\\ProvinceWebController@edit')->name('view-update-provinces');\n\t\tRoute::patch('provinces/update/{id}', 'Province\\ProvinceWebController@update')->name('update-provinces');\n\t\tRoute::delete('provinces/delete/{id}', 'Province\\ProvinceWebController@destroy')->name('delete-provinces');\n\n\t\tRoute::get('cities', 'City\\CityWebController@index')->name('view-cities');\n\t\tRoute::get('cities/add', 'City\\CityWebController@create')->name('view-create-cities');\n\t\tRoute::post('cities/add', 'City\\CityWebController@store')->name('create-cities');\n\t\tRoute::get('cities/update/{id}', 'City\\CityWebController@edit')->name('view-update-cities');\n\t\tRoute::patch('cities/update/{id}', 'City\\CityWebController@update')->name('update-cities');\n\t\tRoute::delete('cities/delete/{id}', 'City\\CityWebController@destroy')->name('delete-cities');\n\n\t\tRoute::get('ads', 'Advertisement\\AdvertisementWebController@index')->name('view-ads'); \n\t\tRoute::get('ads/create', 'Advertisement\\AdvertisementWebController@create')->name('view-create-ads');\n\t\tRoute::post('ads/create', 'Advertisement\\AdvertisementWebController@store')->name('create-ads');\n\t\tRoute::get('ads/update/{id}', 'Advertisement\\AdvertisementWebController@edit')->name('view-update-ads');\n\t\tRoute::patch('ads/update/{id}', 'Advertisement\\AdvertisementWebController@update')->name('update-ads');\n\t\tRoute::delete('ads/delete/{id}', 'Advertisement\\AdvertisementWebController@destroy')->name('delete-ads');\n\n\t\tRoute::get('graphics', 'Graph\\GraphWebController@create')->name('view-create-graphs');\n\t\tRoute::get('graphics_create', 'Graph\\GraphWebController@show')->name('create-graphs');\n\t\tRoute::get('transactions', 'Transaction\\TransactionWebController@index')->name('view-transactions');\n\t\tRoute::get('buyers', 'Buyer\\BuyerWebController@index')->name('view-buyers');\n\t\t\n\t\tRoute::get('others', 'Other\\OtherWebController@index')->name('view-others');\n\t\t// Route::get('others/none', 'Other\\OtherWebController@edit')->name('view-none');\n\t\t// Route::get('others/create', 'Other\\OtherWebController@show')->name('view-create-others');\n\t\tRoute::post('others/create', 'Other\\OtherWebController@store')->name('create-others');\n\t\t// Route::get('others/update', 'Other\\OtherWebController@viewUpdate')->name('view-update-others');\n\t\tRoute::patch('others/update/{id}', 'Other\\OtherWebController@update')->name('update-others');\n\n\t\tRoute::get('dashboard', 'Other\\OtherWebController@dashboard')->name('dashboard');\n\t\tRoute::get('misc/{id}', 'Other\\OtherWebController@create')->name('view-edit-others');\n\t\tRoute::post('misc/{id}', 'Other\\OtherWebController@store')->name('edit-others');\n\n\t\tRoute::get('markasread', 'Other\\OtherWebController@markasread');\n\t\t// Route::get('unread', 'Other\\OtherWebController@unread')->name('unread-notifs');\n\t\t// Route::get('notifications', 'Other\\OtherWebController@notifications')->name('all-notifications');\n\n\t\tRoute::get('trackingMap/currentLat={current_lat}&currentLng={current_lng}&lastLat={last_lat}&lastLng={last_lng}', 'Other\\OtherWebController@map')->name('tracking-map');\n\n\t\tRoute::get('payments', 'Payment\\PaymentWebController@index')->name('view-index-payments');\n\t\tRoute::get('confirmPayment/{id}', 'Payment\\PaymentWebController@edit')->name('view-update-payments');\n\t\tRoute::patch('confirmPayment/{id}/userId={user_id}', 'Payment\\PaymentWebController@update')->name('update-payments');\n\n\t\tRoute::get('bank', 'Bank\\BankWebController@index')->name('view-index-bank');\n\t\tRoute::get('bankCreate', 'Bank\\BankWebController@create')->name('view-create-bank');\n\t\tRoute::post('bankCreate', 'Bank\\BankWebController@store')->name('create-bank');\n\t\tRoute::get('bankUpdate/{id}', 'Bank\\BankWebController@edit')->name('view-update-bank');\n\t\tRoute::patch('bankUpdate/{id}', 'Bank\\BankWebController@update')->name('update-bank');\n\t\tRoute::delete('bankDelete/{id}', 'Bank\\BankWebController@destroy')->name('delete-bank');\n\n\t\tRoute::get('term', 'Term\\TermWebController@index')->name('view-index-term');\n\t\tRoute::get('termCreate', 'Term\\TermWebController@create')->name('view-create-term');\n\t\tRoute::post('termCreate', 'Term\\TermWebController@store')->name('create-term');\n\t\tRoute::get('termUpdate/{id}', 'Term\\TermWebController@edit')->name('view-update-term');\n\t\tRoute::patch('termUpdate/{id}', 'Term\\TermWebController@update')->name('update-term');\n\t\tRoute::delete('termDelete', 'Term\\TermWebController@destroy')->name('delete-term');\n\t\tRoute::get('termPreview/{id}', 'Term\\TermWebController@preview')->name('preview-term');\n\n\t\tRoute::post('logout', 'Auth\\LoginController@logout')->name('logout');\n\t});\n});\n\n\t\t// Route::get('favorites', 'Favorite\\FavoriteWebController@index')->name('view-favorites');\n\t\t// Route::get('services', 'MainService\\MainServiceWebController@index')->name('services-only');\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/routes/web.php",
			"file_size": 11149,
			"file_write_time": 131514892248913537,
			"settings":
			{
				"buffer_size": 11149,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace App\\Http\\Controllers\\Province;\n\nuse App\\City;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Province;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Str;\n\nclass ProvinceWebController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        $provinces = Province::paginate(10);\n        return view('layouts.web.province.index')->with('provinces', $provinces);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        return view('layouts.web.province.create');\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'name_province' => 'required|regex:/^[a-zA-Z. ]+$/',\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput();\n        }\n\n        $data = $request->all();\n        $province = Province::create($data);\n        flash('Your new province created successfully')->success()->important();\n        return redirect()->route('create-provinces');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        $province = Province::where('id', $id)->first();\n        return view('layouts.web.province.edit')->with('province', $province);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        $validator = Validator::make($request->all(), [\n            'name_province' => 'required|regex:/^[a-zA-Z. ]+$/',\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput();\n        }\n\n        $exists = Province::where('name_province', Str::lower($request->name_province))->first();\n        if($exists != null) {\n            flash('Your province already exist')->error()->important();\n        } else {\n            $find = Province::findOrFail($id);\n            $find['name_province'] = $request->name_province;\n            $find->save();\n            flash('Your data province updated successfully')->success()->important();\n        }\n        \n        return redirect()->route('view-provinces');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        $prov = Province::findOrFail($id);\n\n        $prov->delete();\n        $cities = City::where('province_id', $id)->get();\n        foreach ($cities as $city) {\n            $city->delete();\n        }\n        flash('The province and related city data successfully deleted')->success()->important();\n        return redirect()->route('view-provinces');\n    }\n}\n",
			"file": "app/Http/Controllers/Province/ProvinceWebController.php",
			"file_size": 3557,
			"file_write_time": 131514974461872511,
			"settings":
			{
				"buffer_size": 3557,
				"line_ending": "Unix"
			}
		},
		{
			"file": "resources/views/layouts/web/province/index.blade.php",
			"settings":
			{
				"buffer_size": 1477,
				"line_ending": "Unix"
			}
		},
		{
			"file": "resources/views/layouts/web/partials/sidebar.blade.php",
			"settings":
			{
				"buffer_size": 5933,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace App\\Http\\Controllers\\Graph;\n\nuse App\\Graphic;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Transaction;\nuse App\\User;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\n\nclass GraphWebController extends Controller\n{\n    public function index()\n    {   \n        // //choosing user, month, year\n        // $chooseMonth = 7;\n        // $chooseYear = 2017;\n        // $chooseDate = 1;\n        // $setDate = Carbon::create($chooseYear, $chooseMonth, $chooseDate);\n        // $tglAwal = $setDate->startOfMonth()->toDateString();\n        // $tglAkhir = $setDate->endOfMonth()->toDateString();\n        // $tglAwal = intval(substr($tglAwal, 8, 2));\n        // $tglAkhir =intval(substr($tglAkhir, 8, 2));\n        // // dd($tglAkhir);\n        // $data = [];\n\n        // for($i=$tglAwal; $i<=$tglAkhir; $i++) {\n        //     $compare = '2017-07'.$i;\n        //     $transactions = Transaction::where('created_at', $compare)->get();\n        //     $data['tgl'.$i] = $transactions;\n        // }\n        // // $notifs = request()->get('notifs');\n        // // return view('layouts.web.etc.graphic.graph')->with('notifs', $notifs);\n    }\n\n    public function create() //pilih tahun dan bulan untuk liat grafik transaksi\n    {\n        $users = User::all();\n        $yearStart = Transaction::oldest()->first()->created_at->year;\n        $yearEnd = Transaction::latest()->first()->created_at->year;\n        if ($yearStart != $yearEnd) {\n            $years = [];\n            for($i = $yearStart; $i <= $yearEnd; $i++) {\n                $years[$i] = $i;\n            }\n        }\n        $years = [$yearStart];\n        $months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return view('layouts.web.etc.graphic.create')->with('users', $users)->with('years', $years)->with('months', $months);\n    }\n\n    public function show(Request $request) //showing grpahic for user transaction based on choosen year and month\n    {\n        // dd($request);\n        $full_name = User::findOrFail($request->user_id)->full_name;\n        $setDate = Carbon::create($request->year, $request->month, 1);\n\n        //find beginning date of month\n        $awal = $setDate->startOfMonth();\n        $tglAwal = $awal->toDateString();\n\n        //find last date of month\n        $akhir = $setDate->endOfMonth();\n        $tglAkhir = $akhir->toDateString();\n\n        $all = [];\n        $success = [];\n        $failed = [];\n        $days = [];\n        $graphics = Graphic::where('user_id', $request->user_id)->where('type', $request->type)->get();\n        dd($graphics);\n        if($graphics == null) {\n            flash('Sorry you don\\'t have any transactions')->error()->important();\n            return redirect()->back();\n        }\n\n        foreach($graphics as $keyIndex => $graphic) {\n            $all[$keyIndex] = $graphic->count_created;\n            $success[$keyIndex] = $graphic->count_success;\n            $failed[$keyIndex] = $graphic->count_cancel;\n            $tgl = substr($graphic->date, -2);\n            $days[$keyIndex] = intval($tgl);\n        }\n        return view('layouts.web.etc.graphic.graph')->with('success', $success)->with('failed', $failed)->with('all', $all)->with('days', $days)->with('date', $setDate->format('F Y'))->with('full_name', $full_name);\n    }\n}\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Http/Controllers/Graph/GraphWebController.php",
			"file_size": 3335,
			"file_write_time": 131514892247873540,
			"settings":
			{
				"buffer_size": 3335,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace App\\Http\\Controllers\\Transaction;\n\nuse App\\Category;\nuse App\\Events\\AdminNotificationEvent;\nuse App\\Graphic;\nuse App\\Http\\Controllers\\ApiController;\nuse App\\Http\\Controllers\\FCM\\FCMController;\nuse App\\Http\\Controllers\\Graph\\GraphController;\nuse App\\MainService;\nuse App\\Notifications\\AdminNotification;\nuse App\\Service;\nuse App\\Traits\\FcmTrait;\nuse App\\Traits\\GoogleMapTrait;\nuse App\\Traits\\GraphicTrait;\nuse App\\Transaction;\nuse App\\User;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Str;\n\nclass TransactionController extends ApiController\n{\n    use FcmTrait, GoogleMapTrait, GraphicTrait;\n\n    public function __construct() {\n        // Parent::__construct();\n        $this->admin = User::where('admin', [User::SUPERADMIN_USER])->first();\n    }\n\n    public function generateTransactionCode($cat, $sub, $name) {\n        $lastTransaction = DB::table('transactions')->get()->last();\n        if ( ! $lastTransaction ) {\n            $number = 0;\n        } else  {\n            $number = substr($lastTransaction->order_code, 9);  \n        }\n        //Category\n        $cat = strtoupper(substr($cat, 0, 3));\n        // Subcategory\n        $subFull = str_replace('.', '', $sub);\n        $subNoSpace = str_replace(' ', '', $subFull);\n        $sub = strtoupper(substr($subNoSpace, 0, 3));\n        //Name\n        $nameFull = str_replace('.', '', $name);\n        $nameNoSpace = str_replace(' ', '', $nameFull);\n        $name = strtoupper(substr($nameNoSpace, 0, 3));\n        return $cat.$sub.$name.sprintf('%09d', intval($number) + 1);    \n    }\n\n    public function store(Request $request)\n    {\n        $errors = array();\n        $user = Auth::user();\n        $now = Carbon::now();\n        $findService = MainService::where('id', $request->main_service_id)->with('service.category')->first();\n\n        //Check transaksi buyer sesuai dengan tgl order_date trus d cari apa ada yg bentrok jamnya\n        $findTransactions = Transaction::where('order_date', '=', $request->order_date)->where('order_time', '>')->where('buyer_id', $user->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_1, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_6, Transaction::TRANSACTION_STATUS_8])->with('mainservices.service.category')->get();\n\n        if($request->main_service_id == $user->id) { \n            $errors['unauthorize'] = 'You can\\'t create transaction with service id of your own id';\n        } else {\n            if($findService->service == null) {\n                $errors['not_found'] = 'We can\\'t find this service id';\n            }\n        }\n\n        // invalid time order if creating new transaction booking or not booking\n        $join = $request->order_date.\" \".$request->order_time;\n        if(Carbon::createFromFormat('Y-m-d H:i:s', $join)->lt($now)) {\n            $errors['invalid_date'] = 'Order request was past time';\n        }\n\n        // if(Carbon::createFromFormat('Y-m-d', $request->order_date)->lt($now)) {\n        //     $errors['invalid_date'] = Carbon::createFromFormat('Y-m-d', $request->order_date)->lt($now);\n        //     if(Carbon::createFromFormat('H:i:s', $request->order_time)->lt($now)) {\n        //         $errors['invalid_time'] = 'Invalid order_time request';\n        //     }\n        // }        \n        $rules = [\n            'main_service_id' => 'required|numeric',\n            'booking' => 'required|in:'.Transaction::BOOKING.','.Transaction::NOT_BOOKING,\n            'order_date' => 'required|date_format:\"Y-m-d\"',\n            'order_time' => 'required|date_format:\"H:i:s\"',\n            'current_destination' => 'required|string',\n            'final_destination' => 'required|string',\n            'latitude_current' => 'required|numeric', //tujuan awal, ato lokasi buyer\n            'longitude_current' => 'required|numeric', //tujuan awal, ato lokasi buyer\n            'longitude_destination' => 'required|numeric', //tujuan akhir, ato lokasi tujuan buyer\n            'latitude_destination' => 'required|numeric', //tujuan akhir, ato lokasi tujuan buyer\n        ]; \n\n        $this->validate($request, $rules);\n\n        $data = $request->all();\n\n        //generate transaction code\n        $transactionCode = $this->generateTransactionCode($findService->service->category->category_type, $findService->service->category->subcategory_type, $findService->full_name);\n        $data['order_code'] = $transactionCode;\n        $data['status_order'] = Transaction::TRANSACTION_STATUS_1;    \n        $data['buyer_id'] = $user->id;\n        $data['satisfaction_level'] = null;\n        $data['comment'] = null;\n        $data['priority'] = null;\n\n        $transactions = Transaction::where('main_service_id', $request->main_service_id)->where('order_date', '=', $request->order_date)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_4])->whereNotIn('id', $findTransactions->pluck('id'))->get();\n        if($findService->service->category->type == Category::CATEGORY_PEDAGANG || $findService->service->category->category_type == Category::CATEGORY_SUB_BECAK) {\n            $distance = $this->distanceMatrixAbang($data['latitude_current'], $data['longitude_current'], $data['latitude_destination'], $data['longitude_destination']);\n        } else {\n            $distance = $this->distanceMatrix($data['latitude_current'], $data['longitude_current'], $data['latitude_destination'], $data['longitude_destination']);\n        }\n        //klo nga ketemu distance tampilin error & retry again\n        // retry(3, function() use ($data) {\n        //     $distance = $this->distanceMatrix($data['latitude_current'], $data['longitude_current'], $data['latitude_destination'], $data['longitude_destination']);\n        // }, 350);\n        //----------------------------------------------------\n        $travel_time = $distance->rows[0]->elements[0]->duration->value;\n        $distance_km = ceil(intval($distance->rows[0]->elements[0]->distance->value) / pow(10, 3));\n        if($findService->service->category->type == Category::CATEGORY_KENDARAAN) {\n            if($findService->service->category->category_type == Category::CATEGORY_SUB_BECAK && $distance_km > Transaction::TRANSACTION_MAX_KM_BECAK) {\n                $errors['max_distance'] = 'Sorry our limit distance for becak is '.Transaction::TRANSACTION_MAX_KM_BECAK.' km';\n            } elseif($distance_km > Transaction::TRANSACTION_MAX_KM) {\n                $errors['max_distance'] = 'Sorry our limit distance is '.Transaction::TRANSACTION_MAX_KM.' km';\n            }\n        } else { //untuk abang\n            if($findService->service->location_abang == Service::MOVEABLE_SHOP && $distance_km > Transaction::TRANSACTION_MAX_KM_ABANG) {\n                $errors['max_distance'] = 'Sorry our limit distance for abang is '.Transaction::TRANSACTION_MAX_KM_ABANG.' km';\n            }\n        }\n        \n        //untuk check apa ada transaksi yg bentrok\n            $req_order = $request->order_date.\" \".$request->order_time;\n            if(strtolower($findService->service->category->type) == Category::CATEGORY_KENDARAAN) {\n                switch (strtolower($findService->service->category->category_type)) {\n                    case Category::CATEGORY_SUB_OJEK:\n                        $start = Carbon::createFromFormat('H:i:s', $request->order_time)->subMinutes(Transaction::TRANSACTION_MOTOR_MIN);\n                        $end = Carbon::createFromFormat('H:i:s', $request->order_time)->addSeconds($travel_time)->addMinutes(Transaction::TRANSACTION_MOTOR_MAX);\n                        if($transactions != null) {\n                            foreach($findTransactions as $ftrans) {\n                                $estimate_start = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_start);\n                                $estimate_end = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_end);\n                                if($start->between($estimate_start, $estimate_end) || $end->between($estimate_start, $estimate_end)) {\n                                    $errors['buyer_conflict'] = 'Your request has conflict estimation time with other transaction of yours';\n                                }\n                            }\n                            foreach($transactions as $transaction) {\n                                $start_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_start);\n                                $end_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_end);\n                                if($start->between($start_old, $end_old) || $end->between($start_old, $end_old)) { \n                                    $errors['service_conflict'] = 'Sorry your booking time is conflict with other transaction of these provider';\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        $start = Carbon::createFromFormat('H:i:s', $request->order_time)->subMinutes(Transaction::TRANSACTION_MOBIL_MIN);\n                        $end = Carbon::createFromFormat('H:i:s', $request->order_time)->addSeconds($travel_time)->addMinutes(Transaction::TRANSACTION_MOBIL_MAX);\n                        if($transactions != null) {\n                            foreach($findTransactions as $ftrans) {\n                                $estimate_start = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_start);\n                                $estimate_end = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_end);\n                                if($start->between($estimate_start, $estimate_end) || $end->between($estimate_start, $estimate_end)) {\n                                    $errors['buyer_conflict'] = 'Your request has conflict estimation time with other transaction of yours';\n                                }\n                            }\n                            foreach($transactions as $transaction) {\n                                $start_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_start);\n                                $end_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_end);\n                                if($start->between($start_old, $end_old) || $end->between($start_old, $end_old)) { \n                                    $errors['service_conflict'] = 'Sorry your booking time is conflict with other transaction of these provider';\n                                }\n                            }\n                        }\n                        break;\n                }\n                $start = Carbon::createFromFormat('Y-m-d H:i:s', $req_order);\n                $end = Carbon::createFromFormat('Y-m-d H:i:s', $req_order)->addMinutes(Transaction::TRANSACTION_PEDAGANG_MIN);\n                $data['distance'] = $distance->rows[0]->elements[0]->distance->text;\n                $data['traveling_time'] = $distance->rows[0]->elements[0]->duration->text;\n                $data['estimation_time_start'] = $start;\n                $data['estimation_time_end'] = $end;\n\n            } else {\n                if($findService->service->location_abang != Service::STAYED_SHOP) { \n                    $start = Carbon::createFromFormat('H:i:s', $request->order_time)->subMinutes(Transaction::TRANSACTION_PEDAGANG_MIN);\n                    $end = Carbon::createFromFormat('H:i:s', $request->order_time)->addSeconds($travel_time)->addMinutes(Transaction::TRANSACTION_PEDAGANG_MAX);\n                    if($transactions != null) {\n                        foreach($findTransactions as $ftrans) {\n                            $estimate_start = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_start);\n                            $estimate_end = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_end);\n                            if($start->between($estimate_start, $estimate_end) || $end->between($estimate_start, $estimate_end)) {\n                                $errors['buyer_conflict'] = 'Your request has conflict estimation time with other transaction of yours';\n                            }\n                        }\n                        foreach($transactions as $transaction) {\n                            $start_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_start);\n                            $end_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_end);\n                            if($start->between($start_old, $end_old) || $end->between($start_old, $end_old)) { \n                                $errors['service_conflict'] = 'Sorry your booking time is conflict with other transaction of these provider';\n                            }\n                        }\n                    }\n                    $start = Carbon::createFromFormat('Y-m-d H:i:s', $req_order);\n                    $end = Carbon::createFromFormat('Y-m-d H:i:s', $req_order)->addMinutes(Transaction::TRANSACTION_PEDAGANG_MIN);\n                    $data['distance'] = $distance->rows[0]->elements[0]->distance->text;\n                    $data['traveling_time'] = $distance->rows[0]->elements[0]->duration->text;\n                    $data['estimation_time_start'] = $start;\n                    $data['estimation_time_end'] = $end;\n                } else { \n                    $start = Carbon::createFromFormat('H:i:s', $request->order_time);\n                    $end = Carbon::createFromFormat('H:i:s', $request->order_time)->addMinutes(Transaction::TRANSACTION_PEDAGANG_MIN);\n                    if($transactions != null) {\n                        foreach($findTransactions as $ftrans) {\n                            $estimate_start = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_start);\n                            $estimate_end = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_end);\n                            if($start->between($estimate_start, $estimate_end) || $end->between($estimate_start, $estimate_end)) {\n                                $errors['buyer_conflict'] = 'Your request has conflict estimation time with other transaction of yours';\n                            }\n                        }\n                        foreach($transactions as $transaction) {\n                            $start_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_start);\n                            $end_old = Carbon::createFromFormat('H:i:s', $transaction->estimation_time_end);\n                            if($start->between($start_old, $end_old) || $end->between($start_old, $end_old)) { \n                                $errors['service_conflict'] = 'Sorry your booking time is conflict with other transaction of these provider';\n                            }\n                        }\n                    }\n                    $start = Carbon::createFromFormat('Y-m-d H:i:s', $req_order);\n                    $end = Carbon::createFromFormat('Y-m-d H:i:s', $req_order)->addMinutes(Transaction::TRANSACTION_PEDAGANG_MIN);\n                    $data['distance'] = null;\n                    $data['traveling_time'] = null;\n                    $data['estimation_time_start'] = $start;\n                    $data['estimation_time_end'] = $end;            \n                }\n            }\n\n        if ($errors != null) {\n            return $this->errorResponse($errors, 409);\n        }\n\n        $transaction = Transaction::create($data);\n\n        // Create notification for service about new order\n        // $service = User::with('fcm')->findOrFail($request->main_service_id);\n        // $pushService = $this->sendAndroidNotification($service, ucwords(Transaction::TRANSACTION_CREATED), ucfirst(Transaction::TRANSACTION_SERVICE_CONFIRMATION), Transaction::TRANSACTION_TAG_CREATED);\n\n        // Create notification for buyer about new order\n        $buyerGraph = User::with('fcm')->findOrFail(auth()->user()->id);\n        $serviceGraph = User::with('fcm')->findOrFail($request->main_service_id);\n        $pushBuyer = $this->sendAndroidNotification($buyerGraph, ucwords(Transaction::TRANSACTION_CREATED), ucfirst(Transaction::TRANSACTION_USER), Transaction::TRANSACTION_TAG_CREATED);\n\n        // Create notification for admin, simpan ke db ke admin yg superadmin aja\n        $msgAdmin = Transaction::TRANSACTION_CREATED_ADMIN.$data['order_code'];\n        event(new AdminNotificationEvent($msgAdmin));\n        $this->admin->notify(new AdminNotification($msgAdmin));\n\n        // Find or create data graphics for buyer\n        $graphicBuyer = $this->add(Graphic::GRAPH_USER, $buyerGraph);\n\n        // Find or create data for graphics for service\n        $graphicService = $this->add(Graphic::GRAPH_SERVICE, $serviceGraph);\n\n        return $this->showOne($transaction, 201);\n    }\n\n    public function show($id)\n    {\n        $transaction = Transaction::findOrFail($id);\n\n        return $this->showOne($transaction);\n    }\n\n    public function updateBuyer(Request $request, $id_transaction) //only can update status_order untuk cancel order ato untuk kirim commentar dan penilaian\n    {   \n        $errors = array();\n        $buyer = User::with('fcm')->findOrFail(auth()->user()->id); //buyer\n        $transaction = Transaction::findOrFail($id_transaction);\n        $mainservice = User::with('fcm')->findOrFail($transaction->main_service_id);\n        $service = Service::where('main_service_id', $transaction->main_service_id)->first();\n        \n        if($transaction->buyer_id != auth()->user()->id) {\n            $errors['unauthorize'] = 'You don\\'t have authorize to update these transaction';\n        }\n        switch (strtolower($transaction->status_order)) {\n            case Transaction::TRANSACTION_STATUS_1:\n                if($request->has('cancel')) {\n                    $transaction['status_order'] = Transaction::TRANSACTION_STATUS_2;\n                }\n                $pushService = $this->sendAndroidNotification($mainservice, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_CANCEL), Transaction::TRANSACTION_TAG_UPDATED);\n                $pushBuyer = $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_CREATED), ucfirst(Transaction::TRANSACTION_USER), Transaction::TRANSACTION_TAG_CREATED);\n                break;\n            case Transaction::TRANSACTION_STATUS_3:\n                if($request->has('cancel')) {\n                    $errors['not_allowed'] = 'You can\\'t cancel these transaction';\n                }\n                //kasi komentar sama rating, update data service rating\n                $rules = [\n                    'satisfaction_level' => 'required|in:'.Service::RATING_BURUK.','.Service::RATING_KURANG.','.Service::RATING_BIASA.','.Service::RATING_CAKEP.','.Service::RATING_MANTAP,\n                    'comment' => 'required',\n                ];\n\n                $this->validate($request, $rules);\n                if($request->has('satisfaction_level')) {\n                    $service['rating_total'] = $service['rating_total'] + 1;\n                    $service['rating_transactions_total'] = $service['rating_transactions_total'] + $request->satisfaction_level;\n                    $service['rating'] = $service['rating_transactions_total'] / $service['rating_total'];\n                    $service['satisfaction_level'] = $request->comment;\n                    $service['comment'] = $request->comment;\n                }\n                break;\n            default:\n                if($request->has('cancel')) {\n                    $errors['not_allowed'] = 'You can\\'t cancel these transaction';\n                }\n                break;\n        }\n        if($errors != null) {\n            return $this->errorResponse($errors, 401);\n        }\n        $service->save();\n        $buyer->save();\n        $transaction->save();\n\n        return $this->showOne($transaction);\n    }\n\n    public function updateService(Request $request, $id_transaction) { //update status_order, batalin order, isi komentar dan rating \n        $errors = array();\n        $service = User::with('fcm')->findOrFail(auth()->user()->id); //service\n        $mainservice = MainService::where('id', $service->id)->with('service.category')->first();\n        $transaction = Transaction::findOrFail($id_transaction);\n        $buyer = User::with('fcm')->findOrFail($transaction->buyer_id);\n\n        if($transaction->main_service_id != auth()->user()->id) {\n            $errors['unauthorize'] = 'You don\\'t have authorize to update these transaction';\n        }\n\n        $rules = [\n            'gps_latitude' => 'required|numeric',\n            'gps_longitude' => 'required|numeric',\n            // 'accepted' => 'required|string',\n        ];\n\n        $this->validate($request, $rules);\n\n        $mainservice['gps_latitude'] = $request->gps_latitude;\n        $mainservice['gps_longitude'] = $request->gps_longitude;\n        switch (strtolower($transaction->status_order)) {\n            case Transaction::TRANSACTION_STATUS_1:\n                if($request->accepted == Transaction::ACCEPTED_TRANS) {\n                    $transaction['status_order'] = Transaction::TRANSACTION_STATUS_6;\n\n                    $service = Service::where('main_service_id', $transaction->main_service_id)->first();\n\n                    if($mainservice->service->location_abang == Service::STAYED_SHOP) {\n                        $transaction['status_order'] = Transaction::TRANSACTION_STATUS_7;\n                    }\n                    //notifikasi user kalo transaksi diterima oleh service\n                    $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ACCEPT), Transaction::TRANSACTION_TAG_UPDATED);\n                    // retry if fail\n                    // retry(3, function() use ($buyer) {\n                        // $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ACCEPT), Transaction::TRANSACTION_TAG_UPDATED);\n                    // }, 350);\n                    //--------------------\n                } elseif($request->accepted == Transaction::NOT_ACCEPTED_TRANS) {\n                    $transaction['status_order'] = Transaction::TRANSACTION_STATUS_4;\n\n                    //notification for user karena service tolak order\n                    // $this->admin->notify(new AdminNotification(Transaction::TRANSACTION_ABORT)); \n                    $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ABORT), Transaction::TRANSACTION_TAG_UPDATED);\n                    // retry if fail\n                    // retry(3, function() use ($buyer) {\n                        // $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ABORT), Transaction::TRANSACTION_TAG_UPDATED);\n                    // }, 350);\n                    //--------------------\n\n                    //update graphic untuk yg transaksi batal untuk buyer\n                    $this->update(Graphic::GRAPH_USER, $buyer, 'cancel'); \n                    \n                    //update graphic untuk yg transaksi batal untuk service\n                    $this->update(Graphic::GRAPH_SERVICE, $service, 'cancel');\n\n                } else {\n                    $errors['required'] = 'Field accepted needed';\n                }\n                break;\n            case Transaction::TRANSACTION_STATUS_6:\n                //selain abang yg stayed, abang yg moveable, ojek, taksi, dkk\n                $distanceNew = $this->distanceMatrix($transaction->latitude_current, $transaction->longitude_current, $mainservice->gps_latitude, $mainservice->gps_longitude);\n                if($mainservice->service->category->type == Category::CATEGORY_PEDAGANG) {\n                    $distanceNew = $this->distanceMatrixAbang($transaction->latitude_current, $transaction->longitude_current, $mainservice->gps_latitude, $mainservice->gps_longitude);\n                }\n\n                // retry if fail\n                // retry(3, function() use ($buyer, $mainservice) {\n                //     $distanceNew = $this->distanceMatrix($buyer->gps_latitude, $buyer->gps_longitude, $mainservice->gps_latitude, $mainservice->gps_longitude);\n                // }, 350);\n                //--------------------\n                // var_dump($distanceNew->rows[0]->elements[0]->distance->text);\n                if($distanceNew->status == 'OK' && $distanceNew->rows[0]->elements[0]->distance->value <= Transaction::TRANSACTION_MAX_DISTANCE) {\n                    //untuk abang yg move\n                    if($mainservice->service->location_abang == Service::MOVEABLE_SHOP) {\n                        $transaction['status_order'] = Transaction::TRANSACTION_STATUS_7;\n\n                        //notifikasi untuk user\n                        $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ON_THE_PROCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                        // retry if fail\n                        // retry(3, function() use ($buyer) {\n                            // $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ABORT), Transaction::TRANSACTION_TAG_UPDATED);\n                        // }, 350);\n                        //--------------------\n\n                    } else { //untuk kendaraan\n                        $transaction['status_order'] = Transaction::TRANSACTION_STATUS_8;\n\n                        //notifikasi untuk user\n                        $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ON_THE_WAY), Transaction::TRANSACTION_TAG_UPDATED);\n                        // retry if fail\n                        // retry(3, function() use ($buyer) {\n                            // $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_ON_THE_WAY), Transaction::TRANSACTION_TAG_UPDATED);\n                        // }, 350);\n                        //--------------------\n                    }\n                }\n                break;\n            case Transaction::TRANSACTION_STATUS_7://makanan diproses abang yg stay/moveable\n                if($request->accepted == Transaction::ACCEPTED_TRANS) { //dianggap makanan sudah selesai dibuat\n                    $transaction['status_order'] = Transaction::TRANSACTION_STATUS_3;\n\n                    //notification bt admin transaksi berhasil\n                    // $this->admin->notify(new AdminNotification(Transaction::TRANSACTION_SUCCESS));\n\n                    //notifikasi user transaksi sukses\n                    $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                    //retry if fail\n                    // retry(3, function() use ($buyer) {\n                        // $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                    // }, 350);\n                    //-----------------------------------------\n\n                    //notifikasi service transaksi sukses\n                    $this->sendAndroidNotification($service, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n\n                    //retry if fail\n                    // retry(3, function() use ($service) {\n                        // $this->sendAndroidNotification($service, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                    // }, 350);\n                    //-----------------------------------------\n\n                    //update graphic untuk yg transaksi sukses untuk buyer\n                    $result = $this->update(Graphic::GRAPH_USER, $buyer, 'success'); \n                    \n                    //update graphic untuk yg transaksi sukses untuk service\n                    $result = $this->update(Graphic::GRAPH_SERVICE, $service, 'success');\n                } else {\n                    $errors['required'] = 'Field accepted needed';\n                }\n\n                break;\n            case Transaction::TRANSACTION_STATUS_8://ke tujuan untuk kendaraan\n                if($mainservice->service->location_abang == null || $mainservice->service->location_abang == Service::MOVEABLE_SHOP) { //selain abang yg stayed\n                    $distanceNew = $this->distanceMatrix($transaction->latitude_destination, $transaction->longitude_destination, $mainservice->gps_latitude, $mainservice->gps_longitude);\n                    // retry if fail\n                    // retry(3, function() use ($transaction, $mainservice) {\n                    //     $distanceNew = $this->distanceMatrix($transaction->latitude_destination, $transaction->longitude_destination, $mainservice->gps_latitude, $mainservice->gps_longitude);\n                    // }, 350);\n                    //--------------------\n                    // var_dump($distanceNew->rows[0]->elements[0]->distance->value);\n                    if($distanceNew->status == 'OK' && $distanceNew->rows[0]->elements[0]->distance->value <= Transaction::TRANSACTION_MAX_DISTANCE) {//dianggap pesanan berhasil\n                        $transaction['status_order'] = Transaction::TRANSACTION_STATUS_3;\n\n                        //notification for admin klo uda beres transaksinya\n                        // $this->admin->notify(new AdminNotification(Transaction::TRANSACTION_SUCCESS)); \n\n                        //notification ke user transaksi berhasil\n                        $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                        // retry if fail\n                        // retry(3, function() use ($buyer) {\n                            // $pushBuyer = $this->sendAndroidNotification($buyer, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                        // }, 350);\n                        //--------------------\n\n                        //notification ke service transaksi berhasil\n                        $this->sendAndroidNotification($service, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                        // retry if fail\n                        // retry(3, function() use ($service) {\n                            // $this->sendAndroidNotification($service, ucwords(Transaction::TRANSACTION_UPDATED), ucfirst(Transaction::TRANSACTION_SUCCESS), Transaction::TRANSACTION_TAG_UPDATED);\n                        // }, 350);\n                        //--------------------\n\n                        //update graphic untuk yg transaksi sukses untuk buyer\n                        $this->update(Graphic::GRAPH_USER, $buyer, 'success'); \n                        \n                        //update graphic untuk yg transaksi sukses untuk service\n                        $this->update(Graphic::GRAPH_SERVICE, $service, 'success');\n                    } \n                }\n                \n                break;\n            default:\n                break;\n        }\n        $mainservice->save();\n        $transaction->save();\n\n        if($errors != null) {\n            return $this->errorResponse($errors, 409);\n        }\n\n        return $this->showOne($transaction);\n\n    }\n\n    public function updatePriority(Request $request) {\n        foreach($request->transactions as $transaction) {\n            $find = Transaction::findOrFail($transaction->id);\n            $find['priority'] = $transaction->priority;\n            $find->save();\n        }\n        $today = Carbon::now()->toDateString();\n        $user = Auth::user()->id;\n        $transactions = Transaction::where('main_service_id', $user)->where('order_date', $today)->sortBy('priority');\n        return response()->json([\n                'data' => $priority,\n            ], 200);\n    }\n\n    public function destroyBuyer(Request $request) //bentuk nya arrays\n    {\n        $transactions = Transaction::where('buyer_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->get();\n        if($transactions->first() == null) {\n            return $this->errorResponse('Transaction with status success or abort not found', 404);\n        }\n        // $angka = implode(\",\", $transactions->pluck('id')->toArray());\n        $rules = [\n            'id_transaction.*' => 'required|in:'.implode(\",\", $transactions->pluck('id')->toArray()),\n        ];\n\n        $this->validate($request, $rules);\n\n        $findTransactions = Transaction::whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->whereIn('id', $request->id_transaction)->get();\n        // return response()->json($findTransactions);\n        foreach($findTransactions as $transaction) {\n            $transaction->delete();\n        }\n\n        return response()->json([\n            'data' => 'Success deleted transactions',\n            'status' => 'OK',\n            ], 200);\n    }\n\n    public function destroyService(Request $request) //bentuk nya arrays\n    {\n        $transactions = Transaction::where('main_service_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->get();\n        if($transactions->first() == null) {\n            return $this->errorResponse('Transaction with status success or abort not found', 404);\n        }\n        // $angka = implode(\",\", $transactions->pluck('id')->toArray());\n        $rules = [\n            'id_transaction.*' => 'required|in:'.implode(\",\", $transactions->pluck('id')->toArray()),\n        ];\n\n        $this->validate($request, $rules);\n\n        $findTransactions = Transaction::whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->whereIn('id', $request->id_transaction)->get();\n        // return response()->json($findTransactions);\n        foreach($findTransactions as $transaction) {\n            $transaction->delete();\n        }\n\n        return response()->json([\n            'data' => 'Success deleted transactions',\n            'status' => 'OK',\n            ], 200);\n    }\n\n    public function todayService() { //transaksi hari ini yg tdk termasuk yg dibatalkan atau ditolak atau sudah selesai\n        $now = Carbon::now()->toDateString();\n        $transactions = Transaction::where('main_service_id', auth()->user()->id)->where('order_date', '=', $now)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_time', 'ASC')->with('mainservices')->with('buyers')->paginate(10);\n        return $this->showAllNew($transactions);\n    }\n\n    public function todayBuyer() {\n        $now = Carbon::now()->toDateString();\n        $transactions = Transaction::where('buyer_id', auth()->user()->id)->where('order_date', '=', $now)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_time', 'ASC')->with('mainservices')->with('buyers')->paginate(10);\n        return $this->showAllNew($transactions);\n    }\n\n    public function historyService() { //transaksi hari sebelumnya dst\n        $now = Carbon::now()->toDateString();\n        $transactions = Transaction::where('main_service_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_date', 'DESC')->paginate(10);\n        return $this->showAllNew($transactions);\n    }\n\n    public function historyBuyer() { //transaksi hari sebelumnya dst\n        $now = Carbon::now()->toDateString();\n        $transactions = Transaction::where('buyer_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_date', 'DESC')->paginate(10);\n        return $this->showAllNew($transactions);\n    }\n}\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Http/Controllers/Transaction/TransactionController.php",
			"file_size": 36745,
			"file_write_time": 131514892247873540,
			"settings":
			{
				"buffer_size": 36745,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nuse App\\Transaction;\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateTransactionsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('transactions', function (Blueprint $table) {\n            $table->increments('id');\n            $table->integer('main_service_id')->unsigned();\n            $table->integer('buyer_id')->unsigned();\n            $table->string('order_code', 18);\n            $table->string('booking', 1);\n            $table->date('order_date');\n            $table->time('order_time');\n            $table->string('status_order');\n            $table->string('satisfaction_level')->default(null);\n            $table->longText('comment')->nullable(); \n            $table->longText('current_destination'); \n            $table->longText('final_destination');\n            $table->double('latitude_current', 11,6); \n            $table->double('longitude_current', 11,6);\n            $table->double('latitude_destination', 11,6);\n            $table->double('longitude_destination', 11,6);\n            $table->integer('priority')->nullable(); //new field\n            $table->string('distance')->nullable();\n            $table->string('traveling_time')->nullable();//in minute\n            $table->dateTime('estimation_time_start')->nullable();\n            $table->dateTime('estimation_time_end')->nullable();\n            $table->timestamps();\n            $table->softDeletes();\n\n            $table->foreign('buyer_id')->references('id')->on('users');\n            $table->foreign('main_service_id')->references('id')->on('users');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('transactions');\n    }\n}\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/database/migrations/2017_06_06_012702_create_transactions_table.php",
			"file_size": 1909,
			"file_write_time": 131514892247913540,
			"settings":
			{
				"buffer_size": 1909,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 26529 files for \"order_date\"\n\n/home/shideichis/bang-sini-bang/app/Transaction.php:\n   87      \t'order_code',\n   88      \t'booking',\n   89:     \t'order_date',\n   90      \t'order_time',\n   91      \t'status_order',\n\n/home/shideichis/bang-sini-bang/app/Http/Controllers/Transaction/TransactionController.php:\n   59          $findService = MainService::where('id', $request->main_service_id)->with('service.category')->first();\n   60  \n   61:         //Check transaksi buyer sesuai dengan tgl order_date trus d cari apa ada yg bentrok jamnya\n   62:         $findTransactions = Transaction::where('order_date', '=', $request->order_date)->where('order_time', '>')->where('buyer_id', $user->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_1, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_6, Transaction::TRANSACTION_STATUS_8])->with('mainservices.service.category')->get();\n   63  \n   64          if($request->main_service_id == $user->id) { \n   ..\n   71  \n   72          // invalid time order if creating new transaction booking or not booking\n   73:         $join = $request->order_date.\" \".$request->order_time;\n   74          if(Carbon::createFromFormat('Y-m-d H:i:s', $join)->lt($now)) {\n   75              $errors['invalid_date'] = 'Order request was past time';\n   76          }\n   77  \n   78:         // if(Carbon::createFromFormat('Y-m-d', $request->order_date)->lt($now)) {\n   79:         //     $errors['invalid_date'] = Carbon::createFromFormat('Y-m-d', $request->order_date)->lt($now);\n   80          //     if(Carbon::createFromFormat('H:i:s', $request->order_time)->lt($now)) {\n   81          //         $errors['invalid_time'] = 'Invalid order_time request';\n   ..\n   85              'main_service_id' => 'required|numeric',\n   86              'booking' => 'required|in:'.Transaction::BOOKING.','.Transaction::NOT_BOOKING,\n   87:             'order_date' => 'required|date_format:\"Y-m-d\"',\n   88              'order_time' => 'required|date_format:\"H:i:s\"',\n   89              'current_destination' => 'required|string',\n   ..\n  108          $data['priority'] = null;\n  109  \n  110:         $transactions = Transaction::where('main_service_id', $request->main_service_id)->where('order_date', '=', $request->order_date)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_4])->whereNotIn('id', $findTransactions->pluck('id'))->get();\n  111          if($findService->service->category->type == Category::CATEGORY_PEDAGANG || $findService->service->category->category_type == Category::CATEGORY_SUB_BECAK) {\n  112              $distance = $this->distanceMatrixAbang($data['latitude_current'], $data['longitude_current'], $data['latitude_destination'], $data['longitude_destination']);\n  ...\n  134          \n  135          //untuk check apa ada transaksi yg bentrok\n  136:             $req_order = $request->order_date.\" \".$request->order_time;\n  137              if(strtolower($findService->service->category->type) == Category::CATEGORY_KENDARAAN) {\n  138                  switch (strtolower($findService->service->category->category_type)) {\n  ...\n  524          $today = Carbon::now()->toDateString();\n  525          $user = Auth::user()->id;\n  526:         $transactions = Transaction::where('main_service_id', $user)->where('order_date', $today)->sortBy('priority');\n  527          return response()->json([\n  528                  'data' => $priority,\n  ...\n  582      public function todayService() { //transaksi hari ini yg tdk termasuk yg dibatalkan atau ditolak atau sudah selesai\n  583          $now = Carbon::now()->toDateString();\n  584:         $transactions = Transaction::where('main_service_id', auth()->user()->id)->where('order_date', '=', $now)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_time', 'ASC')->with('mainservices')->with('buyers')->paginate(10);\n  585          return $this->showAllNew($transactions);\n  586      }\n  ...\n  588      public function todayBuyer() {\n  589          $now = Carbon::now()->toDateString();\n  590:         $transactions = Transaction::where('buyer_id', auth()->user()->id)->where('order_date', '=', $now)->whereNotIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_time', 'ASC')->with('mainservices')->with('buyers')->paginate(10);\n  591          return $this->showAllNew($transactions);\n  592      }\n  ...\n  594      public function historyService() { //transaksi hari sebelumnya dst\n  595          $now = Carbon::now()->toDateString();\n  596:         $transactions = Transaction::where('main_service_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_date', 'DESC')->paginate(10);\n  597          return $this->showAllNew($transactions);\n  598      }\n  ...\n  600      public function historyBuyer() { //transaksi hari sebelumnya dst\n  601          $now = Carbon::now()->toDateString();\n  602:         $transactions = Transaction::where('buyer_id', auth()->user()->id)->whereIn('status_order', [Transaction::TRANSACTION_STATUS_2, Transaction::TRANSACTION_STATUS_3, Transaction::TRANSACTION_STATUS_4])->orderBy('order_date', 'DESC')->paginate(10);\n  603          return $this->showAllNew($transactions);\n  604      }\n\n/home/shideichis/bang-sini-bang/database/factories/ModelFactory.php:\n  195          'order_code' => $faker->ean8,\n  196          'booking' => $faker->randomElement([Transaction::BOOKING, Transaction::NOT_BOOKING]),\n  197:         'order_date' => Carbon::now()->toDateString(),\n  198          'order_time' => Carbon::now()->toTimeString(),\n  199          'status_order' => Transaction::TRANSACTION_STATUS_6, \n\n/home/shideichis/bang-sini-bang/database/migrations/2017_06_06_012702_create_transactions_table.php:\n   21              $table->string('order_code', 18);\n   22              $table->string('booking', 1);\n   23:             $table->date('order_date');\n   24              $table->time('order_time');\n   25              $table->string('status_order');\n\n/home/shideichis/bang-sini-bang/resources/views/layouts/web/transaction/index.blade.php:\n   20  \t\t\t\t    <td>{{ $transaction->mainservices->full_name }}</td>\n   21  \t\t\t\t    <td>{{ $transaction->buyers->full_name }}</td>\n   22: \t\t\t\t    <td>{{ $transaction->order_date }}</td>\n   23  \t\t\t\t    <td>{{ $transaction->status_order }}</td>\n   24  \t\t\t\t    <td>\n\n/home/shideichis/bang-sini-bang/storage/framework/sessions/BzXGK8Z4MYn1I0CpgvqJWvnbF9Rlt5Kx1nXSA5gF:\n    ERROR: Unable to open file\n\n/home/shideichis/bang-sini-bang/storage/framework/sessions/mj39xHm7HR4NkUZUPbCDrE0E01IWU46PFs1yvpSd:\n    ERROR: Unable to open file\n\n/home/shideichis/bang-sini-bang/storage/framework/views/b6f88cfe4c77439380bca708ebe8f34d1d8db97d.php:\n   19  \t\t\t\t    <td><?php echo e($transaction->mainservices->full_name); ?></td>\n   20  \t\t\t\t    <td><?php echo e($transaction->buyers->full_name); ?></td>\n   21: \t\t\t\t    <td><?php echo e($transaction->order_date); ?></td>\n   22  \t\t\t\t    <td><?php echo e($transaction->status_order); ?></td>\n   23  \t\t\t\t    <td>\n\n20 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 7301,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "<?php\n\nnamespace App;\n\nuse App\\Buyer;\nuse App\\MainService;\nuse App\\Transaction;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Transaction extends Model\n{\n    use SoftDeletes;\n    // Max distance in meter\n    const TRANSACTION_MAX_DISTANCE = 100;\n\n    //cancel order buyer\n    const CANCEl = '1';\n\n    //terima ato ngak (service)\n    const ACCEPTED_TRANS = '1';\n    const NOT_ACCEPTED_TRANS = '0';\n\n    // Untuk booking\n    const BOOKING = '1';\n    const NOT_BOOKING = '0';\n\n    // Untuk kendaraan\n    const TRANSACTION_STATUS_1 = 'menunggu konfirmasi';\n    const TRANSACTION_STATUS_2 = 'pesanan dibatalkan'; //oleh buyer\n    const TRANSACTION_STATUS_3 = 'pesanan berhasil'; //sampai di tujuan, pasti terjadi saat ini\n    const TRANSACTION_STATUS_4 = 'pesanan ditolak'; //oleh service\n    // const TRANSACTION_STATUS_5 = 'perjalanan ke tempatmu';\n    const TRANSACTION_STATUS_6 = 'pesanan diterima';\n    const TRANSACTION_STATUS_7 = 'pesanan makanan/minuman diproses';\n    const TRANSACTION_STATUS_8 = 'perjalanan ke tujuan bersama anda';\n\n    const SATISFACTION_LEVEL_1 = 'buruk';\n    const SATISFACTION_LEVEL_2 = 'kurang';\n    const SATISFACTION_LEVEL_3 = 'biasa';\n    const SATISFACTION_LEVEL_4 = 'cakep';\n    const SATISFACTION_LEVEL_5 = 'mantap';\n\n    //Message for Admin\n    const TRANSACTION_CREATED_ADMIN = 'new transaction created with code ';\n\n    //Message Title Notification Transaction\n    const TRANSACTION_CREATED = 'transaksi baru';\n    const TRANSACTION_UPDATED = 'pembaharuan transaksi';\n\n    //Message Title Notification Transaction\n    const TRANSACTION_SERVICE_CONFIRMATION = 'anda mendapat order baru, tolong lakukan konfirmasi';\n    const TRANSACTION_ACCEPT = 'transaksi diterima';\n    const TRANSACTION_SUCCESS = 'transaksi berhasil';\n    const TRANSACTION_ABORT = 'transaksi ditolak oleh service';\n    const TRANSACTION_ABORT_USER = 'transaksi dibatalkan oleh user';\n    const TRANSACTION_ON_THE_WAY = 'dalam perjalanan bersama anda';\n    const TRANSACTION_ON_THE_PROCESS = 'makanan/minuman yang anda pesan sedang diproses';\n    const TRANSACTION_USER = 'menunggu konfirmasi';\n    const TRANSACTION_CANCEL = 'anda membatalkan transaksi';\n\n    //Tag Push Notification for fcm\n    const TRANSACTION_TAG_CREATED = 'transaction_created';\n    const TRANSACTION_TAG_UPDATED = 'transaction_updated';\n\n    //bates max and min untuk kendaraan (mobil, motor) dan pedagang\n    const TRANSACTION_MOTOR_MIN = 10; //untuk sampai ke buyer\n    const TRANSACTION_MOBIL_MIN = 20; //untuk sampai ke buyer\n    const TRANSACTION_PEDAGANG_MIN = 15; //untuk sampai ke buyer, untuk kasus abang yg moveable\n\n    const TRANSACTION_MOTOR_MAX = 8; //dari buyer ke tujuan\n    const TRANSACTION_MOBIL_MAX = 15; //dari buyer ke tujuan\n    const TRANSACTION_PEDAGANG_MAX = 10; //waktu masak, untuk kasus abang yg moveable\n\n    //Penambahan minute ke $request->order_time untuk ngecek transaksi buyer apa ada yg bentrok ato nga\n    const TRANSACTION_ESTIMATE_REQUEST = 10; //time dalam minute\n\n    // Max distance transaction\n    const TRANSACTION_MAX_KM = 20;\n    const TRANSACTION_MAX_KM_BECAK = 5; //untuk becak\n    const TRANSACTION_MAX_KM_ABANG = 2; //untuk abang\n\n    protected $dates = ['deleted_at'];\n    protected $fillable = [\n    \t'main_service_id',\n    \t'buyer_id',\n    \t'order_code',\n    \t'booking',\n    \t'order_date',\n    \t'order_time',\n    \t'status_order',\n    \t'satisfaction_level',\n    \t'comment',\n    \t'current_destination',\n    \t'final_destination',\n        'latitude_current',\n    \t'longitude_current',\n    \t'latitude_destination',\n    \t'longitude_destination',\n    \t'distance',\n    \t'traveling_time',\n        'priority',\n        'status_toko',\n        'estimation_time_start',\n        'estimation_time_end',\n    ];\n\n    protected $hidden = [\n        'created_at',\n        'updated_at',\n        'deleted_at',\n        // 'estimation_time_start',\n        // 'estimation_time_end',\n    ];\n    \n    public function setStatusOrderAttribute($status_order) {\n        $this->attributes['status_order'] = strtolower($status_order);\n    }\n\n    public function setSatisfactionLevelAttribute($satisfaction_level) {\n        $this->attributes['satisfaction_level'] = strtolower($satisfaction_level);\n    }\n\n    public function isBooking() {\n        return $this->booking == Transaction::BOOKING;\n    }\n\n    public function buyers() {\n        return $this->belongsTo(Buyer::class, 'buyer_id');\n    }\n\n    public function mainservices() {\n        return $this->belongsTo(MainService::class, 'main_service_id');\n    }\n}\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Transaction.php",
			"file_size": 4561,
			"file_write_time": 131514892247873540,
			"settings":
			{
				"buffer_size": 4561,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "@extends('layouts/web/master_admin')\n@section('pageTitle', 'View Graphic')\n@section('content-subheader', 'List Graphic')\n@section('main-content')\n  @include('flash::message')\n    <div>\n        <div class=\"box-header with-border\">\n          <h3 class=\"box-title\">Statistik transaksi dari {{ $full_name }} pada {{ $date }}</h3>\n        </div>\n        <div class=\"box-body\">\n          <div class=\"chart\">\n            <canvas id=\"areaChart\" style=\"height:250px\"></canvas>\n          </div>\n        </div>\n    </div>\n    @include('layouts.web.partials.footer')\n@endsection\n\n@section('script')\n<script>\n    $(function () {\n        /* ChartJS\n         * -------\n         * Here we will create a few charts using ChartJS\n         */\n\n        //--------------\n        //- AREA CHART -\n        //--------------\n\n        // Get context with jQuery - using jQuery's .get() method.\n        var areaChartCanvas = $(\"#areaChart\").get(0).getContext(\"2d\");\n        // This will get the first returned node in the jQuery collection.\n        var areaChart = new Chart(areaChartCanvas);\n\n        var areaChartData = {\n          labels: {{ json_encode($days) }},\n          datasets: [\n            {\n              label: \"Statistik jumlah transaksi\",\n              fillColor: \"rgba(60,141,188,0.9)\",\n              strokeColor: \"rgba(60,141,188,0.8)\",\n              pointColor: \"#3b8bba\",\n              pointStrokeColor: \"rgba(60,141,188,1)\",\n              pointHighlightFill: \"#fff\",\n              pointHighlightStroke: \"rgba(60,141,188,1)\",\n              data: [1, 4, 6, 2, 1, 1, 4, 5, 5, 8]\n            }\n          ]\n        };\n\n        var areaChartOptions = {\n          //Boolean - If we should show the scale at all\n          showScale: true,\n          //Boolean - Whether grid lines are shown across the chart\n          scaleShowGridLines: false,\n          //String - Colour of the grid lines\n          scaleGridLineColor: \"rgba(0,0,0,.05)\",\n          //Number - Width of the grid lines\n          scaleGridLineWidth: 1,\n          //Boolean - Whether to show horizontal lines (except X axis)\n          scaleShowHorizontalLines: true,\n          //Boolean - Whether to show vertical lines (except Y axis)\n          scaleShowVerticalLines: true,\n          //Boolean - Whether the line is curved between points\n          bezierCurve: true,\n          //Number - Tension of the bezier curve between points\n          bezierCurveTension: 0.3,\n          //Boolean - Whether to show a dot for each point\n          pointDot: false,\n          //Number - Radius of each point dot in pixels\n          pointDotRadius: 4,\n          //Number - Pixel width of point dot stroke\n          pointDotStrokeWidth: 1,\n          //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n          pointHitDetectionRadius: 20,\n          //Boolean - Whether to show a stroke for datasets\n          datasetStroke: true,\n          //Number - Pixel width of dataset stroke\n          datasetStrokeWidth: 2,\n          //Boolean - Whether to fill the dataset with a color\n          datasetFill: true,\n          //String - A legend template\n          legendTemplate: \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].lineColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\",\n          //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n          maintainAspectRatio: true,\n          //Boolean - whether to make the chart responsive to window resizing\n          responsive: true\n        };\n\n        //Create the line chart\n        areaChart.Line(areaChartData, areaChartOptions);\n      });\n</script>\n@endsection\n",
			"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/resources/views/layouts/web/etc/graphic/graph.blade.php",
			"file_size": 3797,
			"file_write_time": 131514892248673538,
			"settings":
			{
				"buffer_size": 3797,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//master_admin\n\n// function fetchNotif() {\n        //     $.ajax({\n        //         type: \"GET\", \n        //         url: \"bangsinibang.com/adminpanel/unread\",\n        //         success: function(data){\n        //             alert(data); \n        //         }\n        //     });\n        // };\n        // uncomment these for make unread to read notification\n        // function markAsReadNotification() {\n        //     $.get('/adminpanel/markasread');\n        // }\n\n        // function unreadNotification() {\n        //     $.get('/adminpanel/unread');\n        // }\n\n        // $(document).ready(function() {\n        //     refreshHeader();\n        // });\n\n        // function refreshHeader() {\n        //     $('#notifs').load(\"{{ route('unread-notifs') }}\", function(data) {\n        //         // console.log(data);\n        //         setTimeout(refreshHeader, 15000);\n        //     });\n            \n        //     // $.get(\"{{ route('unread-notifs') }}\", function(data){\n        //     //     console.log(data);\n        //     // });\n        // };\n\ndsq3yElx8pQ:APA91bFeL18hcNUy3EOc0bHiDxtI1d16kDjlGDbZcGLNptNBSEZhupr2VmKGBcXNuru75LaPAzNbUAAjL5DleKrVAU_uS9ZdXr6xiRTafNff79HTsfuHathUPSf6BjiJj0actw60ydVs\n\n\nService 103\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImU1MDFkNGVkZmJiMTRiYjcxNjQ2YWU3YWE0Y2YzYTFjY2E0NzNmODg2YjNiOTBhNThhYmIxNzM5MGYxODBmOTVlMWQyMDMxNzQ0Y2RjMDA4In0.eyJhdWQiOiIxIiwianRpIjoiZTUwMWQ0ZWRmYmIxNGJiNzE2NDZhZTdhYTRjZjNhMWNjYTQ3M2Y4ODZiM2I5MGE1OGFiYjE3MzkwZjE4MGY5NWUxZDIwMzE3NDRjZGMwMDgiLCJpYXQiOjE1MDU0NzA5MDcsIm5iZiI6MTUwNTQ3MDkwNywiZXhwIjoxNTM3MDA2OTA3LCJzdWIiOiIxMDMiLCJzY29wZXMiOltdfQ.R5W9pYlZyBDf_wrwKg5axMC2doHIdH-tesSmLSgmGL4NJ83OE2XjiaGC3Ve_D4W4H0TDLRhDUHmyUv5U-ToOFfA0ewjIGuJPomDHlOIbTJNyfLwj197JWO9bTEihleXWhc3NkX4Yroqoufoggq7py-Gv-S4ZBWT48Po8RyBiMS-lZ-8ieSeXpLH5UiItIcdDY5s5ZSv-6Mz3cxtiH_s6A3uxjCk6IRx0EgKIKVQFLrC4o4ynqmJKSKlEz9zlq7IWHTgeF7MTe8FWYxamGYt3lrUdAZmC3pY4sZzjRZY1r-oV-JObvItqrZNflJipj74MNIskjCfXdo_KFZWaK3tMwSRffF4AkS83GrhgWlUSfcEFj8Szzpe8y81u6NN0o1mqrjzLSPwhVtPQlV01FVz8AWv-er_V-nFTvl6ZtRmDYRkNN-xGny5v1qh3i83FQZ1-1uxcnj0Bb1CegpTUEi-lvtOxXkA3Q6W0-PG5l105JaGOELrZYaz2fQsWfkXPFl8wI63nz_dw18FhthWMuVJUhFF_I8XUtxXDJyVTxk-V-EMwnZveep6Wwpn0msak1i87Zjwp7iwtM51gBqAdRdrmVrVcsJ8_CWY9n2_-wNN4-JhZueQ8wGRW8Gbjyu3SSWx9Bs81M3E84HkC2o1MmSSORJd_7Fi4n254cIIX78t6ah8\n\nService 102\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjM4YWJjYWI2NjRkNjFlYTU3OWIzMTg3MGEzMjUyOGZhYmUxYWIzNDBkYTBiMDYzNTc5MzIyNTA1N2U3MTVmZGFiNThjZmVlMjg4OWM3OTAzIn0.eyJhdWQiOiIxIiwianRpIjoiMzhhYmNhYjY2NGQ2MWVhNTc5YjMxODcwYTMyNTI4ZmFiZTFhYjM0MGRhMGIwNjM1NzkzMjI1MDU3ZTcxNWZkYWI1OGNmZWUyODg5Yzc5MDMiLCJpYXQiOjE1MDU0NzA4OTMsIm5iZiI6MTUwNTQ3MDg5MywiZXhwIjoxNTM3MDA2ODkzLCJzdWIiOiIxMDIiLCJzY29wZXMiOltdfQ.e5i8mm3gOzp1CWIjgYMZ_qRNd2NhHYt9iGCPRSx9mZBVIVoP4OIfMzKLDnuddrouFwqxskb4uvtUNjS3HIwW9ZoQhBHBIVE9wTaktQYEFeOLtkP2YIDXCqVpTkszSq5iXQyqlffEm9PUWdXu6yllgLjpb8xR3KcPH5X8z8AFBJeRgtvaiqtQGrzwu7dZ8grm31NO4gys--bleSeTwRZV1YFdK4FHnYdLksSUpDbQRNnhApVvdp8CGWmOfwjlKrCkD-O99jc6_DKMNUU8z6IA5vs9piI7wpSLaaLRmUbzszfGHiuYOdffp37icU1PJZ0ENYT8CLsctSZXlD4KXL5NmblW_WG5mCs5lJIFlnvqcvSwsmSe66XaEuJt6k9OGQ2LhcKQDsG6G0JDfmpSfTsrwMHEfZbeD1kq-j9TuxG_gc572N4K57fwBBejA9DudOils3WeXAByWD6oYMYqlOwO3jeL18SVn-IS_sF2mbkcgua2fXwE3GoB7YlX2Eef8oL4cg6ihDGwIaP-1YMK7o-H5dDHSMkhsqrGlWO9rxwxp3AL7NzE1wARUnXNuVfAqBk8nB8dhYs1GdrjJRAl8ltCVVV1crg0WJrn03ELWs9uM970orb9qxQ-DeF96hmrVc_dbg8Ik607d9X-SO1bTS3_QoEqtxdgaVs0AoiPn6C3Llw\n\nUser 101\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI5OTI3NzNiZmYwZWRlYjdiODJjZTM4YmI4OTRkNjUzZDM1MzFlNmVlN2EzN2ZlNTM0ZTJkYTZmMDEwYjhlNzI5YzgwNWE1NDI2NWFiZDZjIn0.eyJhdWQiOiIxIiwianRpIjoiMjk5Mjc3M2JmZjBlZGViN2I4MmNlMzhiYjg5NGQ2NTNkMzUzMWU2ZWU3YTM3ZmU1MzRlMmRhNmYwMTBiOGU3MjljODA1YTU0MjY1YWJkNmMiLCJpYXQiOjE1MDU0NzA4NjEsIm5iZiI6MTUwNTQ3MDg2MSwiZXhwIjoxNTM3MDA2ODYxLCJzdWIiOiIxMDEiLCJzY29wZXMiOltdfQ.XancsqmjP8ZpvPti6rYL4tF9C1ylIPwZr5gSBNjxbxUW8Lrwxkss01i8CERzi4fx_Rv_b51_WOn1C3qgTcHriO0wrztNSMiqYch7LfyrX4rszs1uHXn40YjxWjpTzbZdK0KLfEDxbOp3Uiig1ooIbW_Qf9t0cIA4aFk5_iFI2pzTuTdgqbQGYk3T-sGi3EYDdI8ySZ753vzQEBwd5B98Uesk2gbBBIqZoE9C7V6R3piluKMxGjPRg5rU6Dd5WR8rWt1p6LifAVLIiSmSD5jJVY2RUrPDIChVeMvsdhDxKppTq2zqHJc8PFDCP613RrZ1WbuiRbxmuWKiX0a0T1t0Zlt1TU-rOr_Oautbx6X_rx8j06_PS2uQaO2un62XqKvg7IwlUSJPFz2NilOOnZ5gXZ-i8EXKLEp1XbBvg4CTVB2nHdZyWCvMYICPF4PVappfE0Q7ScSm7EvD89TFclOxbGUdf54GBYnrDVaEgGpS-svjY2_oGPbTYbC4ULUiEpPiv9-4FroaqUh3jKggjl9zXw8iVfO_YNvYnwxaV5Tz9aEfiRETRl3eHkrhygRF3yjglJqi_1Qq32G86xiIKa8TrTiZXVjxOaxBv9kkzx5Uu3WI5frMl7OgzW2iZnAFji4R1CZzVwuwVkQEmrNvTtA8jc0M6NmGXkpLRDvimA_fnxA\n\nUser    -> -6.885972, 107.580722\nService -> -6.892254, 107.583107\nDestination -> -6.889527, 107.595942\n            ",
			"settings":
			{
				"buffer_size": 4588,
				"line_ending": "Unix",
				"name": "//master_admin"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 152.0,
		"last_filter": "View: ",
		"selected_items":
		[
			[
				"View: ",
				"View: Toggle Tabs"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"",
				"File: Locate"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"php artisan",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/shideichis/bang-sini-bang",
		"/home/shideichis/bang-sini-bang/resources",
		"/home/shideichis/bang-sini-bang/resources/views",
		"/home/shideichis/bang-sini-bang/resources/views/layouts",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web"
	],
	"file_history":
	[
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/city/create.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/etc/graphic/create.blade.php",
		"/home/shideichis/bang-sini-bang/.env",
		"/home/shideichis/bang-sini-bang/app/Graphic.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/term/preview.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/term/index.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/privacynterm/terms.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Term/TermWebController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Auth/LoginController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/login.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Other/OtherWebController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/term/edit.blade.php",
		"/home/shideichis/bang-sini-bang/app/Term.php",
		"/home/shideichis/bang-sini-bang/app/Transaction.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Transaction/TransactionController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/category/index.blade.php",
		"/home/shideichis/vitaflow/resources/views/layouts/admin/content/all.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/term/create.blade.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_08_10_162221_create_terms_table.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_06_06_012702_create_transactions_table.php",
		"/home/shideichis/bang-sini-bang/app/User.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Other/OtherController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Service/ServiceController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/partials/sidebar.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/User/UserController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Term/TermController.php",
		"/home/shideichis/bang-sini-bang/database/factories/ModelFactory.php",
		"/home/shideichis/bang-sini-bang/database/seeds/DatabaseSeeder.php",
		"/home/shideichis/bang-sini-bang/server.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/partials/header.blade.php",
		"/home/shideichis/bang-sini-bang/resources/assets/js/app.js",
		"/home/shideichis/bang-sini-bang/resources/assets/js/components/Notification.vue",
		"/home/shideichis/bang-sini-bang/app/Service.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/user/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/User/UserWebController.php",
		"/home/shideichis/vitaflow/resources/views/layouts/admin/subcontent/edit.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/MainService/MainServiceController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Armada/ArmadaWebController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Category/CategoryWebController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Message/MessageController.php",
		"/home/shideichis/bang-sini-bang/app/Notifications/UserNotification.php",
		"/home/shideichis/bang-sini-bang/public/js/app.js",
		"/home/shideichis/bang-sini-bang/database/migrations/2014_10_12_000003_create_users_table.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/MessageDetail/MessageDetailController.php",
		"/home/shideichis/bang-sini-bang/vendor/symfony/translation/MessageCatalogue.php",
		"/home/shideichis/bang-sini-bang/app/Traits/FcmTrait.php",
		"/home/shideichis/bang-sini-bang/storage/logs/laravel.log",
		"/home/shideichis/bang-sini-bang/app/Console/Commands/SisaHari.php",
		"/home/shideichis/bang-sini-bang/app/MainService.php",
		"/home/shideichis/bang-sini-bang/app/Http/Middleware/CheckExpiredService.php",
		"/home/shideichis/bang-sini-bang/app/Traits/GoogleMapTrait.php",
		"/home/shideichis/bang-sini-bang/vendor/laravel/framework/src/Illuminate/Pagination/PaginationServiceProvider.php",
		"/home/shideichis/bang-sini-bang/app/Traits/AlgoliaSearch.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Category/CategoryController.php",
		"/home/shideichis/bang-sini-bang/app/Category.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Favorite/FavoriteController.php",
		"/home/shideichis/bang-sini-bang/app/Traits/ApiResponser.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_06_06_083045_create_favorites_table.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Service/ServiceWebController.php",
		"/home/shideichis/bang-sini-bang/config/scout.php",
		"/home/shideichis/bang-sini-bang/app/Providers/AppServiceProvider.php",
		"/home/shideichis/bang-sini-bang/app/Favorite.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/service/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Traits/GraphicTrait.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/service/create.blade.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_06_05_022011_create_services_table.php",
		"/home/shideichis/bang-sini-bang/config/app.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/transaction/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/MainService/MainServiceWebController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/armada/index.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/admin/edit.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/admin/index.blade.php",
		"/home/shideichis/bang-sini-bang/routes/web.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/admin/create.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/user/create.blade.php",
		"/home/shideichis/bang-sini-bang/app/Console/Kernel.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_08_31_084157_create_f_c_ms_table.php",
		"/home/shideichis/bang-sini-bang/node_modules/ioredis/lib/transaction.js",
		"/home/shideichis/bang-sini-bang/app/Traits/SmsTrait.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Sms/SmsController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/FCM/FCMController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Graph/GraphController.php",
		"/home/shideichis/bang-sini-bang/app/Buyer.php",
		"/home/shideichis/bang-sini-bang/app/FCM.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_07_28_175236_create_graphics_table.php",
		"/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Http/Controllers/Transaction/TransactionController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Transaction/TransactionWebController.php",
		"/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/.env",
		"/home/shideichis/bang-sini-bang/app/Http/Kernel.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/tag/create.blade.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_06_04_021612_create_categories_table.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/service/edit.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/province/index.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/tag/edit.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/province/edit.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Tag/TagController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Armada/ArmadaController.php",
		"/home/shideichis/www/html/adminpanel/main_booking.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/category/edit.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/category/create.blade.php",
		"/home/shideichis/AdminLTE/pages/forms/advanced.html",
		"/home/shideichis/bang-sini-bang/public/bower_components/admin-lte/plugins/select2/select2.min.css",
		"/home/shideichis/bang-sini-bang/app/Bank.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/tag/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Tag.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/TagTagController.php",
		"/home/shideichis/bang-sini-bang/config/database.php",
		"/home/shideichis/bang-sini-bang/public/bower_components/admin-lte/plugins/flot/jquery.flot.categories.min.js",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_09_06_152309_create_tags_table.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Message/MessageWebController.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/MessageDetail/MessageDetailWebController.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/messagedetail/index.blade.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_07_12_112037_create_message_details_table.php",
		"/home/shideichis/bang-sini-bang/app/MessageDetail.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/master_admin.blade.php",
		"/home/shideichis/bang-sini-bang/public/bower_components/admin-lte/dist/css/style.default.css",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Payment/PaymentController.php",
		"/home/shideichis/bang-sini-bang/app/Other.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/map/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Http/Middleware/CheckExpiredUser.php",
		"/home/shideichis/bang-sini-bang/app/Http/Controllers/Payment/PaymentWebController.php",
		"/home/shideichis/bang-sini-bang/app/Payment.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_07_14_093734_create_others_table.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/payment/edit.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/payment/index.blade.php",
		"/home/shideichis/bang-sini-bang/resources/views/layouts/web/bank/index.blade.php",
		"/home/shideichis/bang-sini-bang/app/Message.php",
		"/home/shideichis/bang-sini-bang/database/migrations/2017_08_30_003657_create_payments_table.php"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"order_date",
			"time_",
			"request->order_time",
			"data",
			"term",
			"data",
			"category_",
			"email",
			"full_name",
			"$user",
			"Y-m-d ",
			"_order",
			"Y-m-d",
			"foreach($findTransactions as $ftrans) {\n                            $estimate_start = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_start);\n                            $estimate_end = Carbon::createFromFormat('H:i:s', $ftrans->estimation_time_end);\n                            if($start->between($estimate_start, $estimate_end) || $end->between($estimate_start, $estimate_end)) {\n                                $errors['buyer_conflict'] = 'Your request has conflict estimation time with other transaction of yours';\n                            }\n                        }",
			"Y-m-d ",
			"H:i:s",
			"testing",
			"order_date",
			"htmlmail",
			"type_term",
			"password",
			"paragraph",
			"type",
			"email",
			"full_name",
			"users",
			"User",
			"=> 'required|string'",
			"today()",
			"today",
			"gps_latitude",
			"Service",
			"gps",
			"avail",
			"ONLINE_STATUS",
			"data",
			"Category\\CategoryController",
			"avai",
			"showAll",
			"Service",
			"service",
			" $service",
			"$service",
			"['available']",
			"avai",
			"@",
			"avail",
			"->available",
			"available",
			"store",
			"['conflict']",
			"Your request has conflict estimation time with others",
			"your reque",
			"buyer_conflict",
			"transaction",
			"addM",
			"$order_time",
			"TRANSACTION_MAX_KM_MA",
			"TRANSACTION_MAX_KM",
			"TRANSACTION_TOLERANCE_METER",
			"status_order",
			"['",
			"']",
			"$admi",
			"mainservice",
			"phone",
			"Phone",
			"phone",
			"Users",
			"admins",
			"generate",
			"myS",
			"User",
			"contact",
			"sendA",
			"Transaction::TRANSACTION_STATUS_2",
			"latitude",
			"Graph::",
			"Graph",
			"$buyer",
			"pushBuyer",
			"Buyer",
			"$buyer",
			"dd",
			"errorMessage",
			"errorRe",
			"order_date",
			"todate",
			"data",
			"usernot",
			"public",
			"SmsController",
			"store",
			"batal",
			"TRANSACTION_ABORT",
			"cancel",
			"store",
			"check",
			"$buyer",
			"graphicBuyer",
			"\n    ",
			"findGraphic",
			"Transaction_us",
			"buyer",
			"awal",
			"'type'",
			"onlyMessage",
			"service",
			"latitude",
			"User",
			"latitude_current",
			"satisfaction_level",
			"old_expired_at",
			"$duration",
			"$findService",
			"Transaction::TRANSACTION_STATUS_5",
			"TRANSACTION_STATUS_5",
			"reset",
			"$transactions",
			"FCM",
			"users",
			"value",
			"MIN",
			"switch",
			"mainservice->",
			"value",
			"Client",
			"request"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"img",
			"Auth::user()->unreadNotifications->get(10);",
			"Auth::user()->unreadNotifications;",
			"main_service_id",
			"mainservice_id",
			"main_service_id"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/routes/api.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5503,
						"regions":
						{
						},
						"selection":
						[
							[
								2833,
								2833
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 550.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/routes/web.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11149,
						"regions":
						{
						},
						"selection":
						[
							[
								1462,
								1462
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 310.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/Http/Controllers/Province/ProvinceWebController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3557,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "resources/views/layouts/web/province/index.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1477,
						"regions":
						{
						},
						"selection":
						[
							[
								481,
								481
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "resources/views/layouts/web/partials/sidebar.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5933,
						"regions":
						{
						},
						"selection":
						[
							[
								56,
								56
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1350.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Http/Controllers/Graph/GraphWebController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3335,
						"regions":
						{
						},
						"selection":
						[
							[
								2618,
								2618
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Http/Controllers/Transaction/TransactionController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36745,
						"regions":
						{
						},
						"selection":
						[
							[
								9014,
								9014
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2558.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/database/migrations/2017_06_06_012702_create_transactions_table.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1909,
						"regions":
						{
						},
						"selection":
						[
							[
								1468,
								1468
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7301,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										155,
										165
									],
									[
										498,
										508
									],
									[
										602,
										612
									],
									[
										630,
										640
									],
									[
										1116,
										1126
									],
									[
										1397,
										1407
									],
									[
										1514,
										1524
									],
									[
										1897,
										1907
									],
									[
										2233,
										2243
									],
									[
										2261,
										2271
									],
									[
										2902,
										2912
									],
									[
										3325,
										3335
									],
									[
										3735,
										3745
									],
									[
										4237,
										4247
									],
									[
										4916,
										4926
									],
									[
										5380,
										5390
									],
									[
										5717,
										5727
									],
									[
										6131,
										6141
									],
									[
										6499,
										6509
									],
									[
										7164,
										7174
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "/home/shideichis/bang-sini-bang",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1035.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/app/Transaction.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4561,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/shideichis/backup bang sini bang/initial git latest project (masuk ke server)/bang-sini-bang/resources/views/layouts/web/etc/graphic/graph.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3797,
						"regions":
						{
						},
						"selection":
						[
							[
								1162,
								1162
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4588,
						"regions":
						{
						},
						"selection":
						[
							[
								1035,
								1035
							]
						],
						"settings":
						{
							"auto_name": "//master_admin",
							"default_dir": "/home/shideichis/bang-sini-bang",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "bangsinibang.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"provin",
				"app/Http/Controllers/Province/ProvinceWebController.php"
			],
			[
				"sideb",
				"resources/views/layouts/web/partials/sidebar.blade.php"
			],
			[
				".env",
				".env"
			],
			[
				"transactions",
				"database/migrations/2017_06_06_012702_create_transactions_table.php"
			],
			[
				"transa",
				"app/Transaction.php"
			],
			[
				"graph",
				"app/Graphic.php"
			],
			[
				"graphc",
				"app/Http/Controllers/Graph/GraphWebController.php"
			],
			[
				"loginco",
				"app/Http/Controllers/Auth/LoginController.php"
			],
			[
				"otherweb",
				"app/Http/Controllers/Other/OtherWebController.php"
			],
			[
				"login",
				"resources/views/layouts/web/login.blade.php"
			],
			[
				"term",
				"app/Term.php"
			],
			[
				"index.bla",
				"resources/views/layouts/web/category/index.blade.php"
			],
			[
				"othercot",
				"app/Http/Controllers/Other/OtherController.php"
			],
			[
				"servicecontro",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"userc",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				".en",
				".env"
			],
			[
				"transactionco",
				"app/Http/Controllers/Transaction/TransactionController.php"
			],
			[
				"databas",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"model",
				"database/factories/ModelFactory.php"
			],
			[
				"user.php",
				"app/User.php"
			],
			[
				"ser.",
				"server.php"
			],
			[
				"sideba",
				"resources/views/layouts/web/partials/sidebar.blade.php"
			],
			[
				"side",
				"resources/views/layouts/web/partials/sidebar.blade.php"
			],
			[
				"userwe",
				"app/Http/Controllers/User/UserWebController.php"
			],
			[
				"termc",
				"app/Http/Controllers/Term/TermController.php"
			],
			[
				"terms",
				"database/migrations/2017_08_10_162221_create_terms_table.php"
			],
			[
				"categoryweb",
				"app/Http/Controllers/Category/CategoryWebController.php"
			],
			[
				"armada",
				"app/Http/Controllers/Armada/ArmadaWebController.php"
			],
			[
				"transactionc",
				"app/Http/Controllers/Transaction/TransactionController.php"
			],
			[
				"notification",
				"app/Notifications/UserNotification.php"
			],
			[
				"app.js",
				"resources/assets/js/app.js"
			],
			[
				"users",
				"database/migrations/2014_10_12_000003_create_users_table.php"
			],
			[
				"messagede",
				"app/Http/Controllers/MessageDetail/MessageDetailController.php"
			],
			[
				"messagecon",
				"app/Http/Controllers/Message/MessageController.php"
			],
			[
				"messagec",
				"vendor/symfony/translation/MessageCatalogue.php"
			],
			[
				"user",
				"app/User.php"
			],
			[
				"main",
				"app/MainService.php"
			],
			[
				"fcmtra",
				"app/Traits/FcmTrait.php"
			],
			[
				"sisa",
				"app/Console/Commands/SisaHari.php"
			],
			[
				"usercontro",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				"check",
				"app/Http/Middleware/CheckExpiredService.php"
			],
			[
				"googl",
				"app/Traits/GoogleMapTrait.php"
			],
			[
				"paginati",
				"vendor/laravel/framework/src/Illuminate/Pagination/PaginationServiceProvider.php"
			],
			[
				"algol",
				"app/Traits/AlgoliaSearch.php"
			],
			[
				"categorycon",
				"app/Http/Controllers/Category/CategoryController.php"
			],
			[
				"category",
				"app/Category.php"
			],
			[
				"service",
				"app/Service.php"
			],
			[
				"modelf",
				"database/factories/ModelFactory.php"
			],
			[
				"servicc",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"favoritec",
				"app/Http/Controllers/Favorite/FavoriteController.php"
			],
			[
				"favorite",
				"database/migrations/2017_06_06_083045_create_favorites_table.php"
			],
			[
				"apire",
				"app/Traits/ApiResponser.php"
			],
			[
				"servicec",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"servicewebcontro",
				"app/Http/Controllers/Service/ServiceWebController.php"
			],
			[
				"favorites",
				"database/migrations/2017_06_06_083045_create_favorites_table.php"
			],
			[
				"mains",
				"app/MainService.php"
			],
			[
				"fav",
				"app/Http/Controllers/Favorite/FavoriteController.php"
			],
			[
				"categoryc",
				"app/Http/Controllers/Category/CategoryController.php"
			],
			[
				"user.",
				"app/User.php"
			],
			[
				"fcm",
				"app/Traits/FcmTrait.php"
			],
			[
				"apps",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"categorywebc",
				"app/Http/Controllers/Category/CategoryWebController.php"
			],
			[
				"mainser",
				"app/Http/Controllers/MainService/MainServiceController.php"
			],
			[
				"graphic",
				"app/Graphic.php"
			],
			[
				"graphi",
				"app/Traits/GraphicTrait.php"
			],
			[
				"fcmtrait",
				"app/Traits/FcmTrait.php"
			],
			[
				"usercon",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				"modelfac",
				"database/factories/ModelFactory.php"
			],
			[
				"apiresp",
				"app/Traits/ApiResponser.php"
			],
			[
				"transactioncon",
				"app/Http/Controllers/Transaction/TransactionController.php"
			],
			[
				"services",
				"database/migrations/2017_06_05_022011_create_services_table.php"
			],
			[
				"servicecontroller",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"scout.php",
				"config/scout.php"
			],
			[
				"app.php",
				"config/app.php"
			],
			[
				"servicecontr",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"ser",
				"app/Service.php"
			],
			[
				"cate",
				"app/Category.php"
			],
			[
				"categ",
				"app/Category.php"
			],
			[
				"goog",
				"app/Traits/GoogleMapTrait.php"
			],
			[
				"sidebar",
				"resources/views/layouts/web/partials/sidebar.blade.php"
			],
			[
				"tra",
				"app/Transaction.php"
			],
			[
				"graphict",
				"app/Traits/GraphicTrait.php"
			],
			[
				"usercontroll",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				"web.php",
				"routes/web.php"
			],
			[
				"userweb",
				"app/Http/Controllers/User/UserWebController.php"
			],
			[
				"apir",
				"app/Traits/ApiResponser.php"
			],
			[
				"userco",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				"tran",
				"app/Transaction.php"
			],
			[
				"api",
				"app/Traits/ApiResponser.php"
			],
			[
				"trans",
				"app/Transaction.php"
			],
			[
				"mainserv",
				"app/Http/Controllers/MainService/MainServiceWebController.php"
			],
			[
				"mainservic",
				"app/Http/Controllers/MainService/MainServiceController.php"
			],
			[
				"f_c_ms",
				"database/migrations/2017_08_31_084157_create_f_c_ms_table.php"
			],
			[
				"fcmtr",
				"app/Traits/FcmTrait.php"
			],
			[
				"kernel",
				"app/Console/Kernel.php"
			],
			[
				"kerne",
				"app/Console/Kernel.php"
			],
			[
				"graphtra",
				"app/Traits/GraphicTrait.php"
			],
			[
				"grapi",
				"app/Traits/GraphicTrait.php"
			],
			[
				"categroy",
				"app/Category.php"
			],
			[
				"transaction.php",
				"app/Transaction.php"
			],
			[
				"usercontr",
				"app/Http/Controllers/User/UserController.php"
			],
			[
				"app",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"sms",
				"app/Http/Controllers/Sms/SmsController.php"
			],
			[
				"fcmc",
				"app/Http/Controllers/FCM/FCMController.php"
			],
			[
				"appser",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"serv",
				"app/Service.php"
			],
			[
				"buyer",
				"app/Buyer.php"
			],
			[
				"buyer.p",
				"app/Buyer.php"
			],
			[
				"u",
				"app/User.php"
			],
			[
				"fcmcont",
				"app/Http/Controllers/FCM/FCMController.php"
			],
			[
				"graphcis",
				"database/migrations/2017_07_28_175236_create_graphics_table.php"
			],
			[
				"apires",
				"app/Traits/ApiResponser.php"
			],
			[
				"ctaeg",
				"app/Category.php"
			],
			[
				".e",
				".env"
			],
			[
				"graphics",
				"database/migrations/2017_07_28_175236_create_graphics_table.php"
			],
			[
				"apirespon",
				"app/Traits/ApiResponser.php"
			],
			[
				"categorywe",
				"app/Http/Controllers/Category/CategoryWebController.php"
			],
			[
				"databs",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"fcmco",
				"app/Http/Controllers/FCM/FCMController.php"
			],
			[
				"categoryw",
				"app/Http/Controllers/Category/CategoryWebController.php"
			],
			[
				"database",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"login.blade",
				"resources/views/layouts/web/login.blade.php"
			],
			[
				"categories",
				"database/migrations/2017_06_04_021612_create_categories_table.php"
			],
			[
				"servicecon",
				"app/Http/Controllers/Service/ServiceController.php"
			],
			[
				"mainservice",
				"app/MainService.php"
			],
			[
				"checke",
				"app/Http/Middleware/CheckExpiredService.php"
			],
			[
				"otherc",
				"app/Http/Controllers/Other/OtherController.php"
			],
			[
				"cat",
				"app/Category.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 352.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 262.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
